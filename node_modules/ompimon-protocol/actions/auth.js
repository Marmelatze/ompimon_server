var action = require("./action").Action,
    binary = require("binary"),
    BufferBuilder = require('buffer-builder'),
    auth = require('ompimon-auth').auth
;

exports.Action = Auth;

function Auth() {
    action.call(this);
}


// inherit action
Auth.super_ = action;
Auth.prototype = Object.create(action.prototype);

Auth.prototype = {
    parseFromCluster: function(buf) {
        var vars = binary.parse(buf)
                .word8('userLength')
                .buffer('username', 'userLength')
                .word8('passLength')
                .buffer('password', 'passLength')
                .vars
            ;

        return {
            username: vars.username.toString(),
            password: vars.password.toString()
        };
    },
    processFromCluster: function(client, result, callback) {
        this._authenticate(client, result.username, result.password, callback);
    },
    _authenticate: function(client, username, password, callback) {
        var self = this;

        auth.authenticate("cluster", username, password, function() {
            client.authenticated = true;
            callback(self._sendSuccess(client));
        }, function() {
            client.authenticated = false;
            callback(self._sendFailed(client));
        });
    },
    _sendSuccess: function(client) {
        var result = new BufferBuilder();
        result.appendUInt8(0x00); // action id
        result.appendUInt8(0);
        result.appendString(client.id);

        return result.get();
    },
    _sendFailed: function(client) {

        var result = new BufferBuilder();
        result.appendUInt8(0x00);
        result.appendUInt8(1);

        return result.get();
    }
}
