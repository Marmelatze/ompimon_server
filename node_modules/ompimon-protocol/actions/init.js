var action = require("./action").Action,
    binary = require("binary"),
    BufferBuilder = require('buffer-builder'),
    util = require("util"),
    Parser = require("../parser").parser,
    _ = require("underscore"),
    response = require("../response"),
    auth = require('ompimon-auth').auth

    ;

exports.Action = Init;


var featureMap = exports.featureMap = {
    0x01: 'restart',
    0x02: 'abort'
};

function Init() {
    action.call(this);
}

util.inherits(Init, action);

Init.prototype.parse = function(buf) {
    var parser = new Parser(buf);
    var result = {
        protocolVersion: parser.readUInt32(),
        username:        parser.readString(parser.readUInt8()),
        password:        parser.readString(parser.readUInt8()),
        app:             parser.readString(parser.readUInt16()),
        processes:       parser.readUInt64(),
        nodes:           parser.readUInt64(),
        nodeId:          parser.readUInt32(),
        ranks:           this._parseRanks(parser),
        counters:        this._parseCounters(parser),
        sends:           this._parseSends(parser),
        features:        this._parseFeatures(parser)
    };

    return result;
};
/**
 *
 * @param parser Parser
 */
Init.prototype._parseRanks = function(parser) {
    var ranks = [];
    var count = parser.readUInt32();
    for (var i = 0; i < count; i++) {
        ranks.push(parser.readUInt32());
    }

    return ranks;
};

Init.prototype._parseCounters = function(parser) {
    var counters = [];
    var len = parser.readUInt32();
    for (var i = 0; i < len; i++) {
        counters.push(parser.readString(parser.readUInt8()));
    }

    return counters;
};

Init.prototype._parseSends = function(parser) {
    var sends = [];
    var len = parser.readUInt32();
    for (var i = 0; i < len; i++) {
        sends.push(parser.readString(parser.readUInt8()));
    }

    return sends;
};

Init.prototype._parseFeatures = function(parser) {
    var features = {};
    _.each(featureMap, function(feature, key) {
        features[feature] = false;
    });
    var count = parser.readUInt8();
    for (var i = 0; i < count; i++) {
        var feature = featureMap[parser.readUInt8()];
        features[feature] = true;
    }

    return features;
};


Init.prototype.process = function(client, data, callback) {
    this._authenticate(client, data.username, data.password, function(result) {
        if (result.status != response.OK) {
            callback(result);

            return;
        }

        //@TODO mega geile action (lukas)
        callback(new response.Response(response.OK));

    });
};


Init.prototype._authenticate = function(client, username, password, callback) {

    auth.authenticate("cluster", username, password, function() {
        client.authenticated = true;
        callback(new response.Response(response.OK));
    }, function() {
        client.authenticated = false;
        callback(new response.Response(response.NOT_AUTHENTICATED));
    });
};
