var action = require("./action").Action,
    binary = require("binary"),
    BufferBuilder = require('buffer-builder'),
    util = require("util"),
    Parser = require("../parser.js").parser
;

exports.Action = Init;

exports.featureMap = {
    0x01: ''
}

function Init() {
    action.call(this);
}

util.inherits(Init, action);

Init.prototype.parse = function(buf) {
    var parser = new Parser(buf);
    var result = {
        protocolVersion: parser.readUInt32(),
        username:        parser.readString(parser.readUInt8()),
        password:        parser.readString(parser.readUInt8()),
        app:             parser.readString(parser.readUInt16()),
        processes:       parser.readUInt64(),
        nodes:           parser.readUInt64(),
        nodeId:          parser.readUInt32(),
        ranks:           this._parseRanks(parser),
        counters:        this._parseCounters(parser),
        sends:           this._parseSends(parser),
    };


    console.log(result);

    return result;
};
/**
 *
 * @param parser Parser
 */
Init.prototype._parseRanks = function(parser) {
    var ranks = [];
    var count = parser.readUInt32();
    for (var i = 0; i < count; i++) {
        ranks.push(parser.readUInt32());
    }

    return ranks;
};

Init.prototype._parseCounters = function(parser) {
    var counters = [];
    var len = parser.readUInt32();
    for (var i = 0; i < len; i++) {
        counters.push(parser.readString(parser.readUInt8()));
    }

    return counters;
};

Init.prototype._parseSends = function(parser) {
    var sends = [];
    var len = parser.readUInt32();
    for (var i = 0; i < len; i++) {
        sends.push(parser.readString(parser.readUInt8()));
    }

    return sends;
};


Init.prototype.process = function(client, data, callback) {
    var result = new BufferBuilder();
    result.appendUInt8(0x01); // action id
    result.appendUInt8(0);
    result.appendString(client.id);

    callback(result.get());
}