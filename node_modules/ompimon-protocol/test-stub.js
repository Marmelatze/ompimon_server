var
    BufferBuilder = require("buffer-builder"),
    _ = require("underscore"),
    binary = require("binary"),
    Int64 = require('node-int64'),
    globals = require("./globals")

;

module.exports = {
    initData: {
        protocolVersion: 0x01,
        username: "test",
        password: "install",
        app: "Meine Tolle Applikation",
        processes: 123782,
        nodes: 1010000,
        nodeId: 0,
        ranks: [
            123, 495
        ],
        counters: [
            "broadcast",
            "barrier"
        ],
        sends: [
            "ibsend",
            "bsend",
            "irsend"
        ],
        features: {
            restart: true,
            abort: true
        }
    },

    buildInit: function (data) {
        var buffer = new BufferBuilder();

        buffer
            .appendUInt8(data.protocolVersion)
            // username
            .appendUInt8(data.username.length)
            .appendString(data.username)
            // password
            .appendUInt8(data.password.length)
            .appendString(data.password)
            // app name
            .appendUInt16BE(data.app.length)
            .appendString(data.app)
            // processes
            .appendUInt32BE(data.processes)
            // nodes
            .appendUInt32BE(data.nodes)
            // nodeId
            .appendUInt32BE(data.nodeId)
            // rank count
            .appendUInt32BE(data.ranks.length)
        ;
        // ranks
        data.ranks.forEach(function (rank) {
            buffer.appendUInt32BE(rank);
        });

        if (data.nodeId != 0) {
            return buffer;
        }

        // counter functions
        buffer.appendUInt32BE(data.counters.length);
        data.counters.forEach(function (counter) {
            buffer.appendUInt8(counter.length);
            buffer.appendString(counter);
        });
        //send/receive functions
        buffer.appendUInt32BE(data.sends.length);
        data.sends.forEach(function (send) {
            buffer.appendUInt8(send.length);
            buffer.appendString(send);
            buffer.appendUInt8(); // send receive -> /dev/null
        });

        //features
        var features = [];
        _.each(data.features, function (value, feature) {
            var id = _.invert(globals.features)[feature];
            if (value) {
                features.push(id);
            }
        });
        buffer.appendUInt8(features.length);
        features.forEach(function (feature) {
            buffer.appendUInt8(feature);
        });


        return buffer;
    },


    sendData: [
        {
            rank: 13,
            counters: {
                broadcast: 123123,
                barrier: 4234234
            },
            data: [
                {
                    rank: 2,
                    counter: 12344,
                    size: 237373
                },
                {
                    rank: 3,
                    counter: 123123,
                    size: 2020203
                }
            ]
        },
        {
            rank: 24,
            counters: {
                broadcast: 595959,
                barrier: 202340234
            },
            data: [
                {
                    rank: 1,
                    counter: 123123855,
                    size: 2034
                }
            ]
        }
    ],

    buildSend: function (data) {
        var buffer = new BufferBuilder();
        // processes
        data.forEach(function(dataEntry) {
            // counters
            _.each(dataEntry.counters, function(counter) {
                buffer.appendUInt32BE(counter);
            });

            // data
            buffer.appendUInt32BE(dataEntry.data.length);
            dataEntry.data.forEach(function(dataSet) {
                // rank id
                buffer.appendUInt32BE(dataSet.rank);
                // counter
                buffer.appendUInt32BE(dataSet.counter);
                // size
                buffer.appendUInt32BE(dataSet.size);
            });
        });

        return buffer;
    },

    dataDetail: [
        {
            rank: 13,
            functions: {
                ibsend: [
                    {
                        rank: 2,
                        counter: 123,
                        size: 1231234
                    },
                    {
                        rank: 3,
                        counter: 47474,
                        size: 2349
                    }
                ],
                bsend: [
                    {
                        rank: 4,
                        counter: 2349,
                        size: 239492
                    }
                ]
            }
        },
        {
            rank: 24,
            functions: {
                ibsend: [
                    {
                        rank: 1,
                        counter: 123123,
                        size: 349234
                    }
                ],
                bsend: [
                ]
            }
        }
    ],

    buildDataDetail: function (data) {
        var buffer = new BufferBuilder();
        data.forEach(function(rank) {
            _.each(rank.functions, function(func) {
                // array length
                buffer.appendUInt32BE(func.length);
                func.forEach(function(funcData) {
                    //rank
                    buffer.appendUInt32BE(funcData.rank);
                    // counter
                    buffer.appendUInt32BE(funcData.counter);
                    // size
                    buffer.appendUInt32BE(funcData.size);
                });
            });
        });

        return buffer;
    },


    totalSend: {
        sendId: 123,
        data: [
            {
                rank: 1,
                data: [
                    {
                        rank: 1,
                        counter: new Int64(123123),
                        size: new Int64(123993)
                    },
                    {
                        rank: 2,
                        counter: new Int64(393939),
                        size: new Int64(47463)
                    }
                ]
            },
            {
                rank: 2,
                data: [
                    {
                        rank: 3,
                        counter: new Int64(49494),
                        size: new Int64(123)
                    }
                ]
            }
        ]
    },

    buildTotalSend: function(data) {
        var buffer = new BufferBuilder();
        buffer.appendUInt8(data.sendId);
        data.data.forEach(function(rank) {
            buffer.appendUInt32BE(rank.data.length); // rank length
            rank.data.forEach(function(data2) {
                buffer.appendUInt32BE(data2.rank); // rank id
                buffer.appendBuffer(data2.counter.buffer);
                buffer.appendBuffer(data2.size.buffer);
            })
        });

        return buffer;
    },

    sendDetail: {
        sendId: 1,
        data: [
            {
                rank: 1,
                data: [
                    {
                        rank: 2,
                        counter: 13939,
                        size: 494949
                    },
                    {
                        rank: 3,
                        counter: 492384,
                        size: 2348234
                    }
                ]
            },
            {
                rank: 2,
                data: [
                    {
                        rank: 1,
                        counter: 2383,
                        size: 2384234
                    },
                    {
                        rank: 3,
                        counter: 2394234,
                        size: 1239
                    }
                ]
            }
        ]
    },

    buildSendDetail: function (data) {
        var buffer = new BufferBuilder();
        buffer.appendUInt8(data.sendId);
        data.data.forEach(function(rank) {
            buffer.appendUInt32BE(rank.data.length);

            rank.data.forEach(function(data2) {
                buffer.appendUInt32BE(data2.rank);
                buffer.appendUInt32BE(data2.counter);
                buffer.appendUInt32BE(data2.size);
            });

        });

        return buffer;
    },

    totalCounter: [
        {
            rank: 1,
            counters: {
                broadcast: 149494,
                barrier: 237427342
            }
        },
        {
            rank: 2,
            counters: {
                broadcast: 1239375,
                barrier: 59595
            }
        }
    ],

    buildTotalCounter: function (data) {
        var buffer = new BufferBuilder();
        data.forEach(function (rank) {
            _.each(rank.counters, function (counter) {
                buffer.appendUInt32BE(counter);
            });
        });

        return buffer;
    }
};