/**
 * @module ompimon
 * @submodule ompimon-protocol
 */
var
    util = require("util"),
    _ = require("underscore"),
    eventEmitter = require("events").EventEmitter,
    BufferBuilder = require("buffer-builder")


    ;


module.exports = Application;

/**
 * @class Application
 * @namespace Ompimon.Protocol
 * @extends EventEmitter
 * @constructor
 * @param id {Integer}
 */
function Application(id) {
    eventEmitter.call(this);
    this.init(id);
}

util.inherits(Application, eventEmitter);

_.extend(Application.prototype, {


    init: function (id) {
        /**
         * Array with all connected clients for this app
         * @property clients
         * @â€ ype Array
         */
        this.clients = [];

        /**
         * @property id
         * @type Integer
         */
        this.id = id;

        /**
         * Counter functions
         * @property counterFunctions
         * @type Array
         */
        this.counterFunctions = [];

        /**
         * Cluster send functions
         * @property sendFunctions
         * @type Array
         */
        this.sendFunctions = [];

        this.listeners = [];
        this.rankListeners = {};

        this.interval = null;
    },

    /**
     * add new client to app
     * @method addClient
     * @param client {Ompimon.Cluster.Client}
     * @param ranks {Array}
     */
    addClient: function (client, ranks) {
        this.clients.push(client);
    },

    /**
     * decide what to do with incoming data requests
     *
     {
        type: "listen" | "stop",
        sendId: null | Integer,
        rank: null | Integer
     }
     *
     * @method handleDataRequest
     * @param message {Object}
     */
    handleDataRequest: function (message) {
        var id = message.sendId || 'all';
        var array = null;
        console.log(message);

        if (null == message.rank) {
            array = this.listeners;
        } else {
            if (!this.rankListeners[message.rank]) {
                this.rankListeners[message.rank] = [];
            }
            array = this.rankListeners[message.rank];
        }

        if (message.type == "listen") {
           array.push(id);
        } else {
            var index = array.indexOf(id);
            if (index < 0) {
                return;
            }
            array.splice(index, 1);
        }

        if (null == this.interval) {
            this._executeDataRequest();
            this.interval = setInterval(this._executeDataRequest.bind(this), 2000);
        }
    },

    _executeDataRequest: function() {
        console.log("exec");
        var send = false;
        var requestedFunctions = [];
        var sendToAll = function(message) {
            this.clients.forEach(function(client) {
                client.write(message);
            });
        }.bind(this);

        var sendToRanks = function (rank, message) {
            this.client.forEach(function(client) {
                if (client.ranks.indexOf(rank) >= 0) {
                    client.write(message);
                }
            });
        };



        if (this.listeners.indexOf('all') >= 0) {
            var buffer = new BufferBuilder();
            buffer.appendUInt8(0x03);
            buffer.appendUInt8(0x00);
            sendToAll(buffer.get());

            return;
        }

        this.listeners.forEach(function(func) {
            var buffer = new BufferBuilder();
            buffer.appendUInt8(0x05);
            buffer.appendUInt32BE(func);
            sendToAll(buffer.get());
            requestedFunctions.push(func);
            send = true;
        });

        _.each(this.rankListeners, function (funcs, rank) {
            if (funcs.indexOf('all') >= 0) {
                var buffer = new BufferBuilder();
                buffer.appendUInt8(0x03);
                buffer.appendUInt8(0x00);
                sendToRanks(rank, buffer.get());

                return;
            }

            funcs.forEach(function (func) {
                if (requestedFunctions.indexOf(func) >= 0) {
                    return;
                }
                var buffer = new BufferBuilder();
                buffer.appendUInt8(0x05);
                buffer.appendUInt32BE(func);
                sendToRanks(rank, buffer.get());
                send = true;
            });
        });

        if (!send) {
            clearInterval(this.interval);
        }

    }

});