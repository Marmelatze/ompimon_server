/**
 * @module ompimon
 * @submodule ompimon-protocol
 */
var Int64 = require('node-int64')
;

module.exports = Parser;

/**
 * More convenient way to parse buffers
 * @class Parser
 * @namespace Ompimon.Protocol
 * @param buffer {Buffer} buffer to work with
 * @constructor
 */
function Parser(buffer) {
    this.offset = 0;
    this.buffer = buffer;
}

Parser.prototype = {
    /**
     * internal buffer
     * @property buffer
     * @private
     * @type Buffer
     */
    buffer: null,

    /**
     * offset of the internal buffer
     * @property offset
     * @private
     * @type Integer
     */
    offset: 0,

    /**
     * @method readUInt8
     * @return Integer
     */
    readUInt8: function() {
        return this.buffer.readUInt8(this.offset++);
    },
    /**
     * @method readUInt16
     * @return Integer
     */
    readUInt16: function() {
        var result = this.buffer.readUInt16BE(this.offset);
        this.offset += 2;

        return result;
    },
    /**
     * @method readUInt32
     * @return Integer
     */
    readUInt32: function() {
        var result = this.buffer.readUInt32BE(this.offset);
        this.offset += 4;

        return result;
    },
    /**
     * @method readUInt64
     * @return Int64
     */
    readUInt64: function() {
        return new Int64(this.readBuffer(8));
    },
    /**
     * @method readString
     * @param length {Integer}
     * @return String
     */
    readString: function(length) {
        return this.readBuffer(length).toString('utf8');
    },
    /**
     * @method readBuffer
     * @param length {Integer}
     * @return Buffer
     */
    readBuffer: function(length) {
        var buffer = this.buffer.slice(this.offset, this.offset + length);
        this.offset += length;

        return buffer;
    },
    /**
     * Return current state of buffer
     * @method debug
     */
    debug: function() {
        console.log("Buffer");
        console.log(this.buffer.slice(this.offset));
        console.log("----");
    },
    /**
     * Returns true when buffer is read to the end
     * @method atEnd
     * @return boolean
     */
    atEnd: function() {
        return this.offset == this.buffer.length;
    }

};
