/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),

    auth = require('ompimon-auth').auth,

    parser = require("../parser"),
    response = require("../response"),

    action = require("./action")
;


module.exports = Abort;

/**
 * @class Abort
 * @namespace Ompimon.Protocol.ClientAction
 * @extends Ompimon.Protocol.ClientAction.Action
 * @constructor
 */
function Abort() {
    action.call(this);
}

util.inherits(Abort, action);

_.extend(Abort.prototype, {
    /**
     * Parse a message
     * Will return something like:

     {
        protocolVersion: 0x01,
        username: "test",
        password: "install"
     }

     * @method parse
     * @param client {Websocket}
     * @param parser {Ompimon.Protocol.Parser}
     */
    parse: function (client, parser) {
        return {
            appId: parser.readUInt32()
        }
    },
    /**
     * processes parsed data
     * @method process
     * @param client {Websocket}
     * @param data {Object}
     */
    process: function (client, data) {
        var message = {action: 'abort'};
        redisClient.publish("cluster:app:"+data.appId, JSON.stringify(message));
    }
});