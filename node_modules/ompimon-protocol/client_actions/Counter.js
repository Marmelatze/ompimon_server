/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),
    BufferBuilder = require("buffer-builder"),
    async = require("async"),

    Storage = require("ompimon-storage"),
    auth = require('ompimon-auth').auth,


    parser = require("../parser"),
    response = require("../response"),


    action = require("./Action")
    ;

module.exports = Counter;

/**
 * Get details of data emitted by counter functions.
 * Will send realtime data, until other action is requested.
 *
 * @class Counter
 * @namespace Ompimon.Protocol.ClientAction
 * @extends Ompimon.Protocol.ClientAction.Action
 * @constructor
 */
function Counter() {
    action.call(this);
}

util.inherits(Counter, action);

_.extend(Counter.prototype, {
    /**
     * Parse a message
     * Will return something like:

     {
        appId: 123,
        counterId: 2 // optional
     }

     * @method parse
     * @param client {Websocket}
     * @param parser {Ompimon.Protocol.Parser}
     */
    parse: function (client, parser) {
        return {
            appId: parser.readUInt32(),
            counterId: (parser.readUInt8()) ? parser.readUInt32() : null
        }
    },


    /**
     * processes parsed data
     * @param client {Websocket}
     * @param data {Object}
     */
    process: function (client, data) {
        client.selectApp(data.appId);

        if (data.counterId == null) {
            monitor.message('me', 'db', 0x04);

            this._getAllCounters(data.appId, function (err, data) {
                monitor.message('db', 'me', 0x04, data);

                this.emit('send', client, this.buildData(data));
            }.bind(this))
        } else {
            monitor.message('me', 'db', 0x04);
            Storage.getLastCounterData(data.appId, data.counterId, function (err, data) {
                monitor.message('db', 'me', 0x04, data);

                if (err) {
                    console.error(err);
                    return;
                }
                this.emit('send', client, this.buildData(data));
            }.bind(this));
        }




        // listen for real time data
        Storage._getCounterFunctionById(data.appId, data.counterId, function(funcName) {
                client.on('message', function (messages) {
                var sendMessages = [];
                messages.forEach(function (message) {
                    if (message.type != "counter") {
                        return;
                    }

                    if (message.funcName != funcName) {
                        return;
                    }

                    sendMessages.push(message);
                });
                if (sendMessages.length > 0) {
                    monitor.message('db', 'me', 0x04, sendMessages);
                    process.nextTick(function(){
                        this.emit('send', client, this.buildData(sendMessages));
                    }.bind(this));
                }


            }.bind(this));
        }.bind(this));
    },

    _getAllCounters: function (appId, callback) {
        Storage.getCounterFunctions(appId, function (err, counters) {
            if (err) {
                console.error(err);

                return;
            }

            var tasks = [];
            counters.forEach(function (counter, counterId) {
                tasks.push(function(callback) {
                    Storage.getLastCounterData(appId, counterId, callback);
                });
            });

            async.parallel(tasks, function (err, data) {
                if (err) {
                    console.log(error);
                    return;
                }
                if (data.length <= 0) {
                    callback(null, []);
                    return;
                }

                var result = {};
                data.forEach(function(counterData) {
                    counterData.forEach(function (counter) {
                        if (!result[counter.rank]) {
                            result[counter.rank] = parseInt(counter.value);
                        } else {
                            result[counter.rank] += parseInt(counter.value);
                        }
                    });
                });

                var output = [];
                _.each(result, function (value, key) {
                    output.push({
                        rank: key,
                        value: value
                    });
                });


                callback(null, output);

            });

        });
    },

    /**
     * Will parse an object to binary

     [
         {
             rank: 12039393,
             value: 3038373373
         },
         {
             rank: 3455,
             value: 3038373373
         }
     ]

     * @method buildData
     * @param data {Object}
     * @return Buffer
     */
    buildData: function (data) {

        if (data.length <= 0) {
            return null;
        }

        // summarize data
        var result = {};
        data.forEach(function (counter) {
            if (!result[counter.rank]) {
                result[counter.rank] = parseInt(counter.value);
            } else {
                result[counter.rank] += parseInt(counter.value);
            }
        });

        var output = [];
        _.each(result, function (value, key) {
            output.push({
                rank: key,
                value: value
            });
        });


        var buffer = new BufferBuilder();

        buffer.appendUInt32BE(output.length); // numberOfProcesses

        output.forEach(function (process) {
            buffer.appendUInt32BE(process.rank);
            buffer.appendUInt32BE(process.value);
        });

        return buffer.get();
    }

});