/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),
    auth = require('ompimon-auth').auth,


    parser = require("../parser"),
    response = require("../response"),


    action = require("./Action")
    ;

module.exports = Counter;

/**
 * @class Counter
 * @namespace Ompimon.Protocol.ClientAction
 * @extends Ompimon.Protocol.ClientAction.Action
 * @constructor
 */
function Counter() {
    action.call(this);
}

util.inherits(Counter, action);

_.extend(Counter.prototype, {
    /**
     * Parse a message
     * Will return something like:

     {
        appId: 123,
        counterId: 2 // optional
     }

     * @method parse
     * @param client {Websocket}
     * @param parser {Ompimon.Protocol.Parser}
     */
    parse: function (client, parser) {
        //TODO implement @Patricio
    },


    /**
     * processes parsed data
     * @param client {Websocket}
     * @param data {Object}
     */
    process: function (client, data) {
        // TODO implement @Flo
    },

    /**
     * Will parse an object to binary

     [
         {
             processId: 12039393,
             counter: 3038373373
         },
         {
             processId: 3455,
             counter: 3038373373
         }
     ]

     * @method buildData
     * @param data {Object}
     * @return Buffer
     */
    buildData: function (data) {
        var buffer = new BufferBuilder();

        buffer.appendUInt32BE(data.length); // numberOfProcesses

        data.forEach(function (process) {
            buffer.appendUInt32BE(process.processId);
            buffer.appendUInt32BE(process.counter);
        });

        return buffer.get();
    }

});