/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),
    auth = require('ompimon-auth').auth,
    BufferBuilder = require("buffer-builder"),
    Storage = require("ompimon-storage"),
    Int64 = require("node-int64"),


    parser = require("../parser"),
    response = require("../response"),


    action = require("./Action")
    ;

module.exports = CounterDetail;

/**
 * @class SendDetail
 * @namespace Ompimon.Protocol.ClientAction
 * @extends Ompimon.Protocol.ClientAction.Action
 * @constructor
 */
function CounterDetail() {
    action.call(this);
}

util.inherits(CounterDetail, action);

_.extend(CounterDetail.prototype, {
    /**
     * Parse a message
     * Will return something like:

     {
        appId: 123,
        processId: 4949,
        sendId: 456, // optional
     }

     * @method parse
     * @param client {Websocket}
     * @param parser {Ompimon.Protocol.Parser}
     */
    parse: function (client, parser) {

        return {
            appId: parser.readUInt32(),
            processId: parser.readUInt32(),
            sendId: (parser.readUInt8()) ? parser.readUInt32() : null
        }

    },


    /**
     * processes parsed data
     * @param client {Websocket}
     * @param data {Object}
     */
    process: function (client, data) {
        client.selectApp(data.appId);

        // request missing data
        if (data.sendId != null) {
            var redis = Storage.createConnection();
            var message = {
                type: 'listen',
                sendId: data.sendId,
                rank: data.processId
            };
            redis.publish('cluster:app:'+data.appId+':dataDetail', JSON.stringify(message));
            redis.on('publish', function() {
                redis.quit();
            });
        }

        Storage.getSendData(data.appId, data.sendId, data.processId, function (err, returnData) {
            if (err) {
                return console.error(err);
            }
            if (returnData.length == 0 && data.sendId != null) {
                return;
            }

            this.emit('send', client, this.buildData(returnData));
        }.bind(this));

        client.log("resolve " + data.appId + " " + data.sendId);
        Storage._getSendFunctionById(data.appId, data.sendId, function (funcName) {
            client.log("listen for " + funcName + " functions");
            // listen for real time data
            client.on('message', function (messages) {
                var sendMessages = [];
                messages.forEach(function (message) {
                    if ("send" != message.type) {
                        return;
                    }
                    if (message.rank != data.processId) {
                        return;
                    }
                    if (message.funcName != funcName) {
                        return;
                    }
                    sendMessages.push(message);
                });

                if (sendMessages.length > 0) {
                    this.emit('send', client, this.buildData(sendMessages));
                }

            }.bind(this));
        }.bind(this));

        client.once('change', function () {
            var redis = Storage.createConnection();
            var message = {
                type: 'stop',
                sendId: data.sendId,
                rank: data.processId
            };
            redis.publish('cluster:app:'+data.appId+':dataDetail', JSON.stringify(message));
            redis.on('publish', function() {
                redis.quit();
            });
        });
    },

    /**
     * Will parse an object to binary

     [
         {
             time: 9234912491, // timestamp in unix seconds,
             processId: 184824,
             bytes: Int64(12391239)
         },
         {
             time: 12301230123,
             processId: 49494,
             bytes: Int64(2340234)
         }
     ]

     * @method buildData
     * @param data {Object}
     * @return Buffer
     */
    buildData: function (data) {
        var buffer = new BufferBuilder();
        console.log(JSON.stringify(data, null, 4));

        buffer.appendUInt16BE(data.length); // length

        data.forEach(function (process) {
            var size = new Int64(process.size);
            buffer
                .appendUInt32BE(Math.round(process.timestamp / 1000))
                .appendUInt32BE(process.toRank)
                .appendBuffer(size.buffer)
            ;
        });

        return buffer.get();
    }
});