/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),
    auth = require('ompimon-auth').auth,


    parser = require("../parser"),
    response = require("../response"),


    action = require("./Action")
;


module.exports = Login;

/**
 * @class Abort
 * @namespace Ompimon.Protocol.ClientAction
 * @extends Ompimon.Protocol.ClientAction.Action
 * @constructor
 */
function Login() {
    action.call(this);
}

util.inherits(Login, action);

_.extend(Login.prototype, {
    /**
     * Whether this client needs authentication
     * @property needAuthentication
     * @type boolean
     * @default false
     */
    needAuthentication: false,
    /**
     * Parse a message
     * Will return something like:

     {
        protocolVersion: 0x01,
        username: "test",
        password: "install"
     }

     * @method parse
     * @param client {Websocket}
     * @param parser {Ompimon.Protocol.Parser}
     */
    parse: function (client, parser) {
        return {
            protocolVersion: parser.readUInt8(),
            username: parser.readString(parser.readUInt8()),
            password: parser.readString(parser.readUInt8())
        }
    },
    /**
     * processes parsed data
     * @param client {Websocket}
     * @param data {Object}
     */
    process: function (client, data) {
        var self = this;
        this._authenticate(client, data.username, data.password, function(result) {
            if (result.status != response.OK) {
                self.emit('send', client, result);

                return;
            }

            self.emit('send', client, new response.Response(response.OK));
        });
    },
    _authenticate: function(client, username, password, callback) {
        auth.authenticate("android", username, password, function() {
            client.authenticated = true;
            callback(new response.Response(response.OK));
        }, function() {
            client.authenticated = false;
            callback(new response.Response(response.NOT_AUTHENTICATED));
        });
    }
});