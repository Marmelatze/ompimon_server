/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),

    auth = require('ompimon-auth').auth,

    Storage = require("ompimon-storage"),
    Redis = require("redis"),
    BufferBuilder = require("buffer-builder"),

    parser = require("../parser"),
    response = require("../response"),

    action = require("./Action")
;


module.exports = Abort;

/**
 * Abort running application, if supported by the application
 *
 * @class Abort
 * @namespace Ompimon.Protocol.ClientAction
 * @extends Ompimon.Protocol.ClientAction.Action
 * @constructor
 * @author Florian Pfitzer<pfitzer@w3p.cc>
 */
function Abort() {
    action.call(this);
    this.action = "abort";
}

util.inherits(Abort, action);

_.extend(Abort.prototype, {
    /**
     * Parse a message
     * Will return something like:

     {
        protocolVersion: 0x01,
        username: "test",
        password: "install"
     }

     * @method parse
     * @param client {Ompimon.Client.Client}
     * @param parser {Ompimon.Protocol.Parser}
     */
    parse: function (client, parser) {
        return {
            appId: parser.readUInt32()
        }
    },
    /**
     * processes parsed data
     * @method process
     * @param client {Ompimon.Client.Client}
     * @param data {Object}
     */
    process: function (client, data) {
        client.selectApp(data.appId);
        var self = this;
        var message = {action: this.action};

        var redisClient = Redis.createClient();

        var listenChannel = "client:app:"+data.appId+":" + this.action;

        redisClient.on('subscribe', function (channel, count) {
            console.log("subscribed to " + channel, count);
        });

        redisClient.subscribe(listenChannel);

        redisClient.on('message', function(channel, data) {
            console.log("received", data);
            monitor.message('db', 'me', self.action, data);
            if (channel != listenChannel) {
                return false;
            }
            data = JSON.parse(data);
            if (data.status == 'ok') {
                redisClient.quit();
                var response = new BufferBuilder();
                response.appendUInt8(0x00);
                self.emit('send', client, response);
            }
        });
        monitor.message('me', 'db', this.action, data);
        var client2 = Redis.createClient();
        client2.publish("cluster:app:" + data.appId + ":" + this.action, JSON.stringify(message));
        if (this.action == 'restart') {
            client2.publish('cluster:app:'+data.appId+":restart", JSON.stringify({}));
        }
        client2.quit();
        console.log("pub");
    }
});