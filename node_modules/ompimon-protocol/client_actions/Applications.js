/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),
    auth = require('ompimon-auth').auth,
    BufferBuilder = require("buffer-builder"),
    Storage = require("ompimon-storage"),

    parser = require("../parser"),
    response = require("../response"),


    action = require("./Action")
;

module.exports = Applications;

/**
 * @class Applications
 * @namespace Ompimon.Protocol.ClientAction
 * @extends Ompimon.Protocol.ClientAction.Action
 * @constructor
 */
function Applications() {
    action.call(this);
}

util.inherits(Applications, action);

_.extend(Applications.prototype, {
    /**
     * Parse a message
     * Will return something like:

     {
     }

     * @method parse
     * @param client {Websocket}
     * @param parser {Ompimon.Protocol.Parser}
     */
    parse: function (client, parser) {
        return {}; // no payload
    },
    /**
     * processes parsed data
     * @param client {Websocket}
     * @param data {Object}
     */
    process: function (client, data) {
        Storage.getApplications(function(err, data) {
            if (err) {
                console.log(err);
            } else {
                this.emit('send', client, this.buildData(data));
            }
        }.bind(this));
    },

    /**
     * Will parse an object to binary

     [
         {
             id: 123,
             name: "Foo"
         },
         {
             id: 349,
             name: "Bar"
         }
     ]

     * @method buildData
     * @param data {Object}
     * @return Buffer
     */
    buildData: function (data) {
        var buffer = new BufferBuilder();
        buffer.appendUInt8(data.length); // numberOfApps
        data.forEach(function (app, key) {
            buffer.appendUInt32BE(key); // appId
            buffer.appendUInt32BE(app.length); // length
            buffer.appendString(app);
        });

        return buffer.get();
    }

});