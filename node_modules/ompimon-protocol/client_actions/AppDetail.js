/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),
    auth = require('ompimon-auth').auth,


    parser = require("../parser"),
    response = require("../response"),
    globals = require("../globals"),


    action = require("./Action")
    ;

module.exports = AppDetail;

/**
 * @class AppDetail
 * @namespace Ompimon.Protocol.ClientAction
 * @extends Ompimon.Protocol.ClientAction.Action
 * @constructor
 */
function AppDetail() {
    action.call(this);
}

util.inherits(AppDetail, action);

_.extend(AppDetail.prototype, {
    /**
     * Parse a message
     * Will return something like:

     {
        appId: 123
     }

     * @method parse
     * @param client {Websocket}
     * @param parser {Ompimon.Protocol.Parser}
     */
    parse: function (client, parser) {
        return {
            appId: parser.readUInt32()
        }
    },


    /**
     * processes parsed data
     * @param client {Websocket}
     * @param data {Object}
     */
    process: function (client, data) {
        client.selectApp(data.appId);
    },

    /**
     * Will parse an object to binary

     {
        numberOfProcesses: 123,
        numberOfNodes: 1239,
        counters: [
            "broadcast",
            "barrier"
        ],

        sends: [
            "isend",
            "bsend"
        ],

        features: {
            restart: true,
            abort: true
        }
     }

     * @method buildData
     * @param data {Object}
     * @return Buffer
     */
    buildData: function (data) {
        var buffer = new BufferBuilder();
        buffer
            .appendUInt32BE(data.numberOfProcesses) // numberOfProcesses
            .appendUInt32BE(data.numberOfNodes) // numberOfNodes
            .appendUInt32BE(data.counters.length) // numberOfCounterFunctionToTrack
        ;

        // counters
        data.counters.forEach(function(counter) {
            buffer
                .appendUInt8(counter.length)
                .appendString(counter)
            ;
        });

        // sends
        buffer.appendUInt32BE(data.sends.length);
        data.sends.forEach(function (send) {
            buffer
                .appendUInt8(send.length)
                .appendString(send)
            ;
        });

        // features
        var features = [];
        _.each(data.features, function (value, feature) {
            var id = _.invert(globals.features)[feature];
            if (value) {
                features.push(id);
            }
        });
        buffer.appendUInt8(features.length);
        features.forEach(function (feature) {
            buffer.appendUInt8(feature);
        });

        return buffer.get();
    }

});