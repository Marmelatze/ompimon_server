/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),
    BufferBuilder = require("buffer-builder"),

    auth = require('ompimon-auth').auth,
    Storage = require("ompimon-storage"),


    parser = require("../parser"),
    response = require("../response"),


    action = require("./Action")
    ;

module.exports = Send;

/**
 * @class Send
 * @namespace Ompimon.Protocol.ClientAction
 * @extends Ompimon.Protocol.ClientAction.Action
 * @constructor
 */
function Send() {
    action.call(this);
}

util.inherits(Send, action);

_.extend(Send.prototype, {
    /**
     * Parse a message
     * Will return something like:

     {
        appId: 123,
        sendId: 4949 // optinal
     }

     * @method parse
     * @param client {Websocket}
     * @param parser {Ompimon.Protocol.Parser}
     */
    parse: function (client, parser) {

        return {
            appId: parser.readUInt32(),
            sendId: (parser.readUInt8()) ? parser.readUInt32() : null
        }

    },


    /**
     * processes parsed data
     * @param client {Websocket}
     * @param data {Object}
     */
    process: function (client, data) {
        Storage.getLastSendData(data.appId, data.sendId, function (err, data) {
            if (err) {
                return console.error(err);
            }

            this.emit('send', client, this.buildData(data));
        }.bind(this));
    },

    /**
     * Will parse an object to binary

     [
         {
             senderId: 4848,
             receiverId: 4949,
             bytes: Int64(202)
         },
         {
             senderId: 49494,
             receiverId: 494949,
             bytes: Int64(4949)
         }
     ]

     * @method buildData
     * @param data {Object}
     * @return Buffer
     */
    buildData: function (data) {
        var buffer = new BufferBuilder();

        buffer.appendUInt16BE(data.length); // length

        data.forEach(function (process) {
            console.log(process.size);

            buffer
                .appendUInt32BE(process.rank)
                .appendUInt32BE(process.toRank)
                .appendBuffer(process.size.buffer)
            ;
        });

        return buffer.get();
    }

});