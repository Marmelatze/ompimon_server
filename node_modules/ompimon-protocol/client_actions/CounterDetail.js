/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),
    BufferBuilder = require("buffer-builder"),
    async = require("async"),

    auth = require('ompimon-auth').auth,
    Storage = require("ompimon-storage"),

    parser = require("../parser"),
    response = require("../response"),


    action = require("./Action")
    ;

module.exports = CounterDetail;

/**
 * @class CounterDetail
 * @namespace Ompimon.Protocol.ClientAction
 * @extends Ompimon.Protocol.ClientAction.Action
 * @constructor
 */
function CounterDetail() {
    action.call(this);
}

util.inherits(CounterDetail, action);

_.extend(CounterDetail.prototype, {
    /**
     * Parse a message
     * Will return something like:

     {
        appId: 123,
        processId: 456,
        counterId: 123939
     }

     * @method parse
     * @param client {Websocket}
     * @param parser {Ompimon.Protocol.Parser}
     */
    parse: function (client, parser) {

        return {
            appId: parser.readUInt32(),
            processId: parser.readUInt32(),
            counterId: (parser.readUInt8()) ? parser.readUInt32() : null
        }
    },


    /**
     * processes parsed data
     * @param client {Websocket}
     * @param data {Object}
     */
    process: function (client, data) {
        client.selectApp(data.appId);

        if (data.counterId == null) {
            monitor.message('me', 'db');

            this._getAllCounters(data.appId, data.processId, function (err, data) {
                monitor.message('db', 'me');
                this.emit('send', client, this.buildData(data));
            }.bind(this));
        } else {
            monitor.message('me', 'db');

            Storage.getCounterData(data.appId, data.counterId, data.processId, function (err, data) {
                monitor.message('db', 'me');

                this.emit('send', client, this.buildData(data));
            }.bind(this));
        }

        //listen for realtime events
        // listen for real time data
        client.on('message', function (messages) {
            var sendMessages = [];
            messages.forEach(function (message) {
                if (message.type != "counter" || message.rank != data.processId) {
                    return;
                }

                sendMessages.push(message);
            });

            if (sendMessages.length > 0) {
                monitor.message('db', 'me');
                this.emit('send', client, this.buildData(sendMessages));
            }

        }.bind(this));
    },

    _getAllCounters: function (appId, processId, callback) {
        Storage.getCounterFunctions(appId, function (err, counters) {
            if (err) {
                console.error(err);

                return;
            }

            var tasks = [];
            counters.forEach(function (counter, counterId) {
                tasks.push(function (callback) {
                    Storage.getCounterData(appId, counterId, processId, callback);
                });
            });

            async.parallel(tasks, function (err, results) {
                if (err) {
                   console.error(err);

                   return;
                }

                var values = {};
                results.forEach(function (result) {
                    result.forEach(function (counterResult) {
                        if (null == values[counterResult.timestamp]) {
                            values[counterResult.timestamp] = counterResult.value;
                        } else {
                            values[counterResult.timestamp] += counterResult.value;
                        }
                    });
                });

                var output = [];
                _.each(values, function (value, timestamp) {
                    output.push({
                        timestamp: timestamp,
                        value: value
                    });
                });

                callback(null, output);

            });
        });
    },

    /**
     * Will parse an object to binary

     [
         {
             timestamp: 1234737127, // unix timestamp (seconds)
             value: 1239239
         },
         {
             timestamp: 28423742234,
             value: 1237123
         }
     ]

     * @method buildData
     * @param data {Object}
     * @return Buffer
     */
    buildData: function (data) {

        var values = {};
        data.forEach(function (counterResult) {
            if (null == values[counterResult.timestamp]) {
                values[counterResult.timestamp] = counterResult.value;
            } else {
                values[counterResult.timestamp] += counterResult.value;
            }
        });

        var output = [];
        _.each(values, function (value, timestamp) {
            output.push({
                timestamp: timestamp,
                value: value
            });
        });

        var buffer = new BufferBuilder();

        buffer.appendUInt16BE(output.length); // length

        output.forEach(function (process) {
            buffer.appendUInt32BE(Math.round(process.timestamp/1000));
            buffer.appendUInt32BE(process.value);
        });

        return buffer.get();
    }

});