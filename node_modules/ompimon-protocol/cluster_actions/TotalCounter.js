/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),
    binary = require("binary"),
    BufferBuilder = require('buffer-builder'),
    Storage = require("ompimon-storage"),

    auth = require('ompimon-auth').auth,

    action = require("./Action"),
    Parser = require("../parser"),
    response = require("../response"),
    globals = require("../globals")
    ;


module.exports = TotalSend;

/**
 * @class SendDetail
 * @namespace Ompimon.Protocol.Action
 * @extends Ompimon.Protocol.Action.Action
 * @constructor
 */
function TotalSend() {
    action.call(this);
}

util.inherits(TotalSend, action);

_.extend(TotalSend.prototype, {
    /**
     * Parse data send by cluster.
     * Will return something like:

     [
         {
             rank: 1,
             counters: {
                 broadcast: 149494,
                 barrier: 23742734234
             }
         },
         {
             rank: 2,
             counters: {
                 broadcast: 1239375,
                 barrier: 59595
             }
         }
     ]

     * @method parse
     * @param client {Ompimon.Cluster.Client}
     * @param parser {Ompimon.Protocol.Parser}
     * @return {Object}
     */
    parse: function(client, parser) {
        var result = [];
        client.ranks.forEach(function(rank) {
            result.push(this._parseRank(parser, rank, client.counterFunctions));
        }, this);

        return result;
    },

    /**
     * @method _parseRank
     * @param parser {Ompimon.Protocol.Parser}
     * @param rank {Integer}
     * @param counters {Array}
     * @private
     */
    _parseRank: function (parser, rank, counters) {
        return {
            rank: rank,
            counters: this._parseCounters(parser, counters)
        };
    },

    /**
     * @method _parseCounters
     * @param parser {Ompimon.Cluster.Client}
     * @param counters {Array}
     * @private
     */
    _parseCounters: function (parser, counters) {
        var result = {};
        counters.forEach(function(counter) {
            result[counter] = parser.readUInt32();
        });

        return result;
    },

    process: function(client, data, callback) {
        // TODO
    }

});