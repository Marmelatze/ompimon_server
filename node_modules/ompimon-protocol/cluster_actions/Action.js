/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    eventEmitter = require('events').EventEmitter,
    util = require("util"),
    _ = require("underscore")
;


module.exports = Action;

/**
 * Superclass for all actions
 *
 * @class Action
 * @namespace Ompimon.Protocol.Action
 * @constructor
 */
function Action () {
    eventEmitter.call(this);
    /**
     * Whether this action needs authentication
     * @property needAuthentication
     * @type {boolean}
     * @default true
     */
    this.needAuthentication = true;
}

util.inherits(Action, eventEmitter);


_.extend(Action.prototype, {
    /**
     * action code
     * @property code
     * @type Integer
     */
    code: null,
    /**
     * Parse buffers send by the cluster
     * @method parse
     * @param client {Ompimon.Cluster.Client}
     * @param buf {Buffer}
     */
    parse: function(client, buf) {
        throw new Error("parse not implemented");
    },

    /**
     * Process data parsed by {{#crossLink "Ompimon.Protocol.Action.Action/parse:method"}}{{/crossLink}}
     * @method process
     * @param client {Ompimon.Cluster.Client}
     * @param data {mixed}
     * @param callback {function} will be called if processed
     * @async
     */
    process: function (client, data, callback) {
        throw new Error("process not implemented");
    }

});

