/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),
    binary = require("binary"),
    BufferBuilder = require('buffer-builder'),
    Storage = require("ompimon-storage"),

    auth = require('ompimon-auth').auth,

    action = require("./Action"),
    TotalSend = require("./TotalSend"),
    Parser = require("../parser"),
    response = require("../response"),
    globals = require("../globals")
    ;


module.exports = SendDetail;

/**
 * @class SendDetail
 * @namespace Ompimon.Protocol.ClusterAction
 * @extends Ompimon.Protocol.ClusterAction.TotalSend
 * @constructor
 */
function SendDetail() {
    TotalSend.call(this);
}

util.inherits(SendDetail, TotalSend);

_.extend(SendDetail.prototype, {
    /**
     * Parse data send by cluster.
     * Will return something like:

     {
        sendId: 1,
        ranks: [
            {
                rank: 1,
                data: [
                    {
                        rank: 2,
                        counter: 13939,
                        size: 494949
                    },
                    {
                        rank: 3,
                        counter: 492384,
                        size: 2348234
                    }
                ]
            },
            {
                rank: 2,
                data: [
                    {
                        rank: 1,
                        counter: 2383,
                        size: 2384234
                    },
                    {
                        rank: 3,
                        counter: 2394234,
                        size: 1239
                    }
                ]
            }
        ]
    }

     * @method parse
     * @param client {Ompimon.Cluster.Client}
     * @param parser {Ompimon.Protocol.Parser}
     * @return {Object}
     */
    parse: function(client, parser) {
        return SendDetail.super_.prototype.parse.call(this, client, parser);
    },

    /**
     * @method _parseRankDetail
     * @param parser {Ompimon.Protocol.Parser}
     * @private
     */
    _parseRankDetail: function (parser) {
        return {
            rank: parser.readUInt32(),
            counter: parser.readUInt32(),
            size: parser.readUInt32()
        };
    },


    process: function(client, data, callback) {
        monitor.message('me', 'db', 0x05, data);

        Storage.receiveSingleDetailsAction(client.app.id, data, function() {
            callback();
        });
    }

});