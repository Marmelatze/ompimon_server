/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    _ = require("underscore"),
    util = require("util"),

    action = require("./Action"),
    Parser = require("../parser")

    ;


module.exports = DataDetail;

/**
 * @class DataDetail
 * @namespace Ompimon.Protocol.Action
 * @extends Ompimon.Protocol.Action.Action
 * @constructor
 */
function DataDetail() {
    action.call(this);
}

util.inherits(DataDetail, action);


_.extend(DataDetail.prototype, {
    /**
     * @method parse
     * @param client {Ompimon.Cluster.Client}
     * @param parser {Ompimon.Protocol.Parser}
     * @return {Array} with data
     */
    parse: function (client, parser) {
        var result = [];
        for (var i = 0; i < client.ranks.length; i++) {
            result.push(this._parseRank(client, parser, client.ranks[i]));
        }

        return result;
    },
    _parseRank: function (client, parser, rank) {
        return {
            rank: rank,
            functions: this._parseFunctions(client, parser)
        }
    },
    _parseFunctions: function (client, parser) {
        var functions = {};
        client.sendFunctions.forEach(function (func) {
            functions[func] = this._parseFuncData(parser);
        }, this);

        return functions;
    },
    _parseFuncData: function (parser) {
        var data = [];
        var len = parser.readUInt32();
        for (var i = 0; i < len; i++) {
            data.push(this._parseData(parser));
        }

        return data;
    },
    _parseData: function (parser) {
        return {
            rank: parser.readUInt32(),
            counter: parser.readUInt32(),
            size: parser.readUInt32()
        }
    }

});