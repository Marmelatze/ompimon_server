/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    _ = require("underscore"),
    util = require("util"),
    Storage = require("ompimon-storage"),

    action = require("./Action"),
    Parser = require("../parser"),
    response = require("../response")

    ;


module.exports = Data;

/**
 * Will parse and process data action (0x02)
 *
 * @class Data
 * @namespace Ompimon.Protocol.Action
 * @extends Ompimon.Protocol.Action.Action
 * @constructor
 *
 */
function Data() {
    action.call(this);
}

util.inherits(Data, action);


_.extend(Data.prototype, {


    /**
     Parse Data objects from client. Will return something like:

         [
             {
                 rank: 13,
                 counters: {
                     broadcast: 123123,
                     barrier: 4234234
                 },
                 data: [
                     {
                         rank: 2,
                         counter: new Int64(12344),
                         size: new Int64(237373)
                     },
                     {
                         rank: 3,
                         counter: new Int64(123123),
                         size: new Int64(2020203)
                     }
                 ]
             },
             {
                 rank: 24,
                 counters: {
                     broadcast: 595959,
                     barrier: 202340234
                 },
                 data: [
                     {
                         rank: 1,
                         counter: new Int64(123123855),
                         size: new Int64(2034)
                     }
                 ]
             }
         ]

     @method parse
     @param client {Ompimon.Cluster.Client}
     @param parser {Ompimon.Protocol.Parser}
     @return {Array}
     */
    parse: function (client, parser) {
        var result = [];
        for (var i = 0; i < client.ranks.length; i++) {
            result.push(this._parseRank(client, parser, client.ranks[i]));
        }

        return result;
    },

    /**
     * processes data parsed by parse function
     *
     * @method process
     * @async
     * @param client {Ompimon.Cluster.Client}
     * @param data {Array} from parse function
     * @param callback will be called if finished
     */
    process: function(client, data, callback) {
        Storage.receiveAction(client.app.id, data, function () {
            // don't send a response
            if (callback) {
                callback();
            }
        });
    },

    _parseRank: function (client, parser, rank) {
        return {
            rank:     rank,
            counters: this._parseCounters(client, parser),
            data:     this._parseData(parser)
        };
    },

    _parseCounters: function (client, parser) {
        var counters = {};
        for (var i = 0; i < client.app.counterFunctions.length; i++) {
            var value = parser.readUInt32();
            var key = client.app.counterFunctions[i];
            counters[key] = value;
        }


        return counters;
    },
    _parseData:     function (parser) {
        var data = [];
        var len = parser.readUInt32();
        for (var i = 0; i < len; i++) {
            data.push(this._parseDataItem(parser));
        }

        return data;
    },
    _parseDataItem: function (parser) {
        return {
            rank:    parser.readUInt32(),
            counter: parser.readUInt32(),
            size:    parser.readUInt32()
        }
    }


});