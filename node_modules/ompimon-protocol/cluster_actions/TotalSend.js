/**
 * @module ompimon
 * @submodule ompimon-protocol
 */

var
    util = require("util"),
    _ = require("underscore"),
    binary = require("binary"),
    BufferBuilder = require('buffer-builder'),
    Storage = require("ompimon-storage"),

    auth = require('ompimon-auth').auth,

    action = require("./Action"),
    Parser = require("../parser"),
    response = require("../response"),
    globals = require("../globals")
    ;


module.exports = TotalSend;

/**
 * @class SendDetail
 * @namespace Ompimon.Protocol.Action
 * @extends Ompimon.Protocol.Action.Action
 * @constructor
 */
function TotalSend() {
    action.call(this);
}

util.inherits(TotalSend, action);

_.extend(TotalSend.prototype, {
    /**
     * Parse data send by cluster.
     * Will return something like:

     {
        sendId: 123,
        ranks: [
            {
                rank: 1,
                data: [
                    {
                        rank: 1,
                        counter: new Int64(123123),
                        size: new Int64(123993)
                    },
                    {
                        rank: 2,
                        counter: new Int64(393939),
                        size: new Int64(47463)
                    }
                ]
            },
            {
                rank: 2,
                data: [
                    {
                        rank: 3,
                        counter: new Int64(49494),
                        size: new Int64(123)
                    }
                ]
            }
        ]
    }

     * @method parse
     * @param client {Ompimon.Cluster.Client}
     * @param parser {Ompimon.Protocol.Parser}
     * @return {Object}
     */
    parse: function(client, parser) {
        var result = {
            sendId: parser.readUInt8(),
            ranks: this._parseData(parser, client.ranks)
        };

        return result;
    },

    /**
     * parse data
     * @method _parseData
     * @param parser {Ompimon.Protocol.Parser}
     * @param ranks {Array}
     * @return Array
     * @private
     */
    _parseData: function(parser, ranks) {
        var result = [];
        for (var i = 0; i < ranks.length; i++) {
            result.push(this._parseRank(parser, ranks[i]));
        }

        return result;
    },

    /**
     * parses rank
     * @method _parseRank
     * @param parser {Ompimon.Protocol.Parser}
     * @param rank {Integer}
     * @return Object
     * @private
     */
    _parseRank: function(parser, rank) {
        return {
            rank: rank,
            data: this._parseRankData(parser)
        };
    },

    /**
     *
     * @method _parseRankData
     * @param parser {Ompimon.Protocol.Parser}
     * @return Array
     * @private
     */
    _parseRankData: function (parser) {
        var result = [];
        var length = parser.readUInt32();
        for (var i = 0; i < length; i++) {
            result.push(this._parseRankDetail(parser));
        }

        return result;
    },

    /**
     * @method _parseRankDetail
     * @param parser {Ompimon.Protocol.Parser}
     * @private
     */
    _parseRankDetail: function (parser) {
        return {
            rank: parser.readUInt32(),
            counter: parser.readUInt64(),
            size: parser.readUInt64()
        };
    },

    /**
     * Process data parsed by parse function
     *
     * @method process
     * @param client
     * @param data
     * @param callback
     */
    process: function(client, data, callback) {
        Storage.receiveTotalAction(client.app.id, data, callback);
    }

});