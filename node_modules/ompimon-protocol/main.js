/**
 * Protocol Module handles incomming requests
 *
 * Actions:
 *
 * * {{#crossLink "Ompimon.Protocol.Action.Init"}}Init (0x01){{/crossLink}}
 * * {{#crossLink "Ompimon.Protocol.Action.Data"}}Data (0x02){{/crossLink}}
 * * {{#crossLink "Ompimon.Protocol.Action.DataRequest"}}DataRequest (0x03){{/crossLink}}
 *
 * @module ompimon
 * @submodule ompimon-protocol
*/


var
    _ = require("underscore"),
    BufferBuilder = require('buffer-builder'),
    globals = require("./globals")
;

/**
 * @class Protocol
 * @namespace Ompimon.Protocol
 * @constructor
 */
function Protocol() {

}


module.exports = Protocol;

var actionMap = {};
_.each(globals.actions, function(actionClass, id) {
    var action = require('./actions/' + actionClass);
    actionMap[id] = new action();
});


_.extend(Protocol.prototype, {
    /**
     * Parse a message received by the cluster
     *
     * @method parse
     * @async
     * @param client
     * @param buf Buffer with received message
     * @param callback will be called on error or success, first param buffer function(buf) {...}
     */
    parse: function(client, buf, callback) {
        var result;
        var action = buf.readUInt8(0);
        var actionClass = actionMap[action];
        if (!actionClass) {
            result = new BufferBuilder();
            result.appendUInt8(action);
            result.appendUInt8(0x02); // invalid input
            callback(result.get());

            return;
        }

        if (!client.authenticated && actionClass.needAuthentication) {
            result = new BufferBuilder();
            result.appendUInt8(action);
            result.appendUInt8(0x03); // not authenticated
            callback(result.get());

            return;
        }

        var result = actionClass.parse(client, buf.slice(1, buf.length));
        actionClass.process(client, result, function(response) {
            var buffer = new BufferBuilder();
            buffer.appendUInt8(action);
            buffer.appendUInt8(response.status);

            callback(buffer.get());
        });
    },
    /**
     * Global Settings see {{#crossLink "Ompimon.Protocol.Globals"}}{{/crossLink}}
     * @property globals
     */
    globals: require("./globals")
});