var
    BufferBuilder = require("buffer-builder"),
    _ = require("underscore"),
    binary = require("binary"),
    Int64 = require('node-int64'),

    Client = require("ompimon-client/client"),
    Storage = require("ompimon-storage"),

    Protocol = require("../.."),
    auth = require("ompimon-auth").auth,
    Parser = require("../../parser"),
    stub = require("../../test-client-stub"),

    action = require("../../client_actions/Send")

    ;
auth.type = "test";

var Action = new action;

var client = new Client('send', new Buffer(256));

module.exports = {
    testParse: function(test) {
        var data = stub.buildSend(stub.sendData);
        var parser = new Parser(data);

        var result = Action.parse(client, parser);

        test.deepEqual(result, stub.sendData);
        test.done();
    },

    testParseOptional: function(test) {
        var data2 = _.clone(stub.sendData);
        data2.sendId = null;

        var data = stub.buildSend(data2);
        var parser = new Parser(data);

        var result = Action.parse(client, parser);

        test.deepEqual(result, data2);
        test.done();
    },


    testProcess: function (test) {
        Action.process(client, {
            appId: 0,
            sendId: null
        });

        Action.once('send', function(client, data) {
            console.log(data);
            test.notEqual(data, null);
            test.done();
        });
    },

    testProcess2: function (test) {

        var redis = Storage.createConnection();
        var redis2 = Storage.createConnection();

        redis.subscribe('cluster:app:0:dataDetail');

        redis.once('message', function (channel, message) {
            message = JSON.parse(message);
            test.equal(message.type, "listen");
            test.equal(message.sendId, 1);

            redis2.publish('client:app:0', JSON.stringify([
                {
                    type: 'send',
                    rank: 1,
                    toRank: 2,
                    size: 1234
                },
                {
                    type: 'send',
                    rank: 3,
                    toRank: 4,
                    size: 123
                }
            ]));
        });

        redis.on('subscribe', function() {
            Action.process(client, {
                appId: 0,
                sendId: 1,
                processId: 1
            });

            Action.once('send', function(client, data) {
                console.log(data);
                test.notEqual(data, null);
                test.done();
            });
        });

    }

};