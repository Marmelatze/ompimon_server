var
    BufferBuilder = require("buffer-builder"),
    _ = require("underscore"),
    binary = require("binary"),
    Int64 = require('node-int64'),

    Client = require("ompimon-client/client"),
    ClusterClient = require("ompimon-cluster/client"),

    Protocol = require("../.."),
    auth = require("ompimon-auth").auth,
    Parser = require("../../parser"),
    stub = require("../../test-client-stub"),

    action = require("../../client_actions/Counter"),

    ClusterAction = require("../../cluster_actions/Data"),

    clusterStub = require("../../test-stub"),

    Application = require("../../Application")


    ;
auth.type = "test";

var Action = new action;

var clusterAction = new ClusterAction();

var client = new Client('1', new Buffer(256));

var clusterClient = new ClusterClient(new Buffer(256));
clusterClient.id = "1234567890yyyasdfasdfasdfasdfasd";
clusterClient.app = new Application(0);
clusterClient.app.counterFunctions = ['broadcast', 'barrier'];
clusterClient.ranks = [13, 24];

module.exports = {

    testParse: function(test) {
        var data = stub.buildCounter(stub.counterData);
        var parser = new Parser(data);

        var result = Action.parse(client, parser);

        test.deepEqual(result, stub.counterData);
        test.done();
    },

    testParseOptional: function(test) {
        var data2 = _.clone(stub.counterData);
        data2.counterId = null;

        var data = stub.buildCounter(data2);
        var parser = new Parser(data);

        var result = Action.parse(client, parser);
        test.deepEqual(result, data2);
        test.done();
    },

    testProcess: function (test) {
        Action.process(client, {
            appId: 0,
            counterId: null
        });

        Action.once('send', function(client, data) {
            console.log(data);
            test.notEqual(data, null);
            test.done();
        });
    },

    testProcess2: function (test) {
        Action.process(client, {
            appId: 0,
            counterId: 0
        });

        Action.once('send', function(client, data) {
            console.log(data);
            test.notEqual(data, null);
            test.done();
        });
    },
    testProcessAsync: function (test) {
        Action.process(client, {
            appId: 0,
            counterId: null
        });

        Action.once('send', function(client, data) {
            console.log("once");
            console.log(data);
            test.notEqual(data, null);

            Action.once('send', function (client, data) {
                console.log(data);
                test.notEqual(data, null);
                test.done();
            });

            clusterAction.process(clusterClient, clusterStub.sendData);
        });
    }
};