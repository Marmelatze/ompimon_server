var
    BufferBuilder = require("buffer-builder"),
    _ = require("underscore"),
    binary = require("binary"),
    Int64 = require('node-int64'),

    cluster = require('ompimon-cluster'),
    protocol = require("../"),
    protoDataRequest = require('../actions/data_request')

    ;


var client = cluster.client;

client = new client.client(new Buffer(256));
client.id = "1234567890yyyasdfasdfasdfasdfasd";
client.sendFunctions = ['ibsend', 'bsend'];
client.ranks = [13, 24];

var action = new protoDataRequest();


var data = [
    {
        rank: 13,
        functions: {
            ibsend: [
                {
                    rank: 2,
                    counter: new Int64(123),
                    size: new Int64(1231234)
                },
                {
                    rank: 3,
                    counter: new Int64(47474),
                    size: new Int64(2349)
                }
            ],
            bsend: [
                {
                    rank: 4,
                    counter: new Int64(2349),
                    size: new Int64(239492)
                }
            ]
        }
    },
    {
        rank: 24,
        functions: {
            ibsend: [
                {
                    rank: 1,
                    counter: new Int64(123123),
                    size: new Int64(349234)
                }
            ],
            bsend: [
            ]
        }
    }
];


function build(data) {
    var buffer = new BufferBuilder();
    data.forEach(function(rank) {
        _.each(rank.functions, function(func) {
            // array length
            buffer.appendUInt32BE(func.length);
            func.forEach(function(funcData) {
                //rank
                buffer.appendUInt32BE(funcData.rank);
                // counter
                buffer.appendBuffer(funcData.counter.buffer);
                // size
                buffer.appendBuffer(funcData.size.buffer);
            });
        });
    });

    return buffer;
}


module.exports = {
    testParse: function(test) {

        var result = action.parse(client, build(data).get());

        test.deepEqual(result, data);

        test.done();
    }
};
