var
    BufferBuilder = require("buffer-builder"),
    _ = require("underscore"),
    binary = require("binary"),
    Int64 = require('node-int64'),

    auth = require("ompimon-auth").auth,
    cluster = require('ompimon-cluster'),

    protocol = require("../"),
    protoInit = require('../actions/init'),
    Parser = require("../parser")
    ;

auth.type = "test";

var client = cluster.client;

client = new client.client(new Buffer(256));
client.id = "1234567890yyyasdfasdfasdfasdfasd";

var action = new protoInit();


var data = {
    protocolVersion: 0x01,
    username: "test",
    password: "test",
    app: "Meine Tolle Applikation",
    processes: new Int64(123782),
    nodes: new Int64(1010000),
    nodeId: 0,
    ranks: [
        123, 495
    ],
    counters: [
        "broadcast",
        "barrier"
    ],
    sends: [
        "ibsend",
        "bsend",
        "irsend"
    ],
    features: {
        restart: true,
        abort: true
    }
};

function build(data) {
    var buffer = new BufferBuilder();

    buffer
        .appendUInt32BE(data.protocolVersion)
        // username
        .appendUInt8(data.username.length)
        .appendString(data.username)
        // password
        .appendUInt8(data.password.length)
        .appendString(data.password)
        // app name
        .appendUInt16BE(data.app.length)
        .appendString(data.app)
        // processes
        .appendBuffer(data.processes.buffer)
        // nodes
        .appendBuffer(data.nodes.buffer)
        // nodeId
        .appendUInt32BE(data.nodeId)
        // rank count
        .appendUInt32BE(data.ranks.length)
    ;
    // ranks
    data.ranks.forEach(function (rank) {
        buffer.appendUInt32BE(rank);
    });

    if (data.nodeId != 0) {
        return buffer;
    }

    // counter functions
    buffer.appendUInt32BE(data.counters.length);
    data.counters.forEach(function (counter) {
        buffer.appendUInt8(counter.length);
        buffer.appendString(counter);
    });
    //send/receive functions
    buffer.appendUInt32BE(data.sends.length);
    data.sends.forEach(function (send) {
        buffer.appendUInt8(send.length);
        buffer.appendString(send);
    });

    //features
    var features = [];
    _.each(data.features, function (value, feature) {
        var id = _.invert(protocol.globals.features)[feature];
        if (value) {
            features.push(id);
        }
    });
    buffer.appendUInt8(features.length);
    features.forEach(function (feature) {
        buffer.appendUInt8(feature);
    });


    return buffer;
}

module.exports = {
    testParse: function (test) {
        var buffer = build(data);

        var result = action.parse(client, buffer.get());
        test.deepEqual(result, data);
        test.done();
    },

    testParseIncomplete: function(test) {
        var data2 = _.clone(data);
        delete data2['counters'];
        delete data2['sends'];
        delete data2['features'];
        data2.nodeId = 1;

        var buffer = build(data2);
        var result = action.parse(client, buffer.get());
        test.deepEqual(result, data2);
        test.done();
    },

    testProcess: function (test) {
        var data2 = action.parse(client, build(data).get());

        action.process(client, data2, function (result) {
            test.equal(result.status, 0);
            test.done();
        });
    },
    testAll: function (test) {

        var buffer = new BufferBuilder();
        buffer.appendUInt8(0x01);
        buffer.appendBuffer(build(data).get());

        protocol.parse(client, buffer.get(), function (result) {
            var parser = new Parser(result);
            test.equal(parser.readUInt8(), 1);
            test.equal(parser.readUInt8(), 0);
            test.done();
        });
    }
};
