var
    BufferBuilder = require("buffer-builder"),
    _ = require("underscore"),
    binary = require("binary"),
    Int64 = require('node-int64'),
    net = require("net"),

    auth = require("ompimon-auth").auth,
    cluster = require('ompimon-cluster'),
    Redis = require("redis"),

    protocol = require("../../"),
    protoInit = require('../../cluster_actions/Init'),
    Parser = require("../../parser"),

    stub = require("../../test-stub")
    ;

auth.type = "test";

var client = cluster.client;

var socket = new net.Socket();
socket.write = function(message) {

};

client = new client(socket, "Init");

var action = new protoInit();

var Protocol = new protocol();


module.exports = {
    testParse: function (test) {
        var buffer = stub.buildInit(stub.initData);
        var parser = new Parser(buffer.get());

        var result = action.parse(client, parser);
        test.deepEqual(result, stub.initData);
        test.done();
    },

    testParseIncomplete: function(test) {
        var data2 = _.clone(stub.initData);
        delete data2['counters'];
        delete data2['sends'];
        delete data2['features'];
        data2.nodeId = 1;

        var buffer = stub.buildInit(data2);
        var parser = new Parser(buffer.get());
        var result = action.parse(client, parser);
        test.deepEqual(result, data2);
        test.done();
    },

    testProcess: function (test) {
        var parser = new Parser(stub.buildInit(stub.initData).get());
        var data2 = action.parse(client, parser);

        action.process(client, data2, function (result) {
            test.equal(result.status, 0);
            test.deepEqual(client.ranks, data2.ranks);
            test.deepEqual(client.app.counterFunctions, data2.counters);
            test.deepEqual(client.app.sendFunctions, data2.sends);

            test.done();
        });
    },
    testAll: function (test) {

        var buffer = new BufferBuilder();
        buffer.appendUInt8(0x01);
        buffer.appendBuffer(stub.buildInit(stub.initData).get());

        client.buffers.push(buffer.get());

        Protocol.once('send', function (client, result) {
            var parser = new Parser(result);
            test.equal(parser.readUInt8(), 1);
            test.equal(parser.readUInt8(), 0);

            test.deepEqual(client.ranks, stub.initData.ranks);
            test.deepEqual(client.app.counterFunctions, stub.initData.counters);
            test.done();
        });
        Protocol.parseCluster(client);

    },

    testAbort: function (test) {

        var parser = new Parser(stub.buildInit(stub.initData).get());
        var data2 = action.parse(client, parser);

        action.process(client, data2, function (result) {
            test.equal(result.status, 0);
            var redis = Redis.createClient();

            redis.publish('cluster:app:0:abort', null);
            client.once('write', function (result) {
                var parser = new Parser(result);
                test.equal(parser.readUInt8(), 0xFF);
                test.equal(parser.readUInt8(), 0x00);
                redis.quit();
                test.done();
            });
        });
    },

    testRestart: function (test) {

        var parser = new Parser(stub.buildInit(stub.initData).get());
        var data2 = action.parse(client, parser);

        action.process(client, data2, function (result) {
            test.equal(result.status, 0);
            var redis = Redis.createClient();

            redis.publish('cluster:app:0:restart', null);
            client.once('write', function (result) {
                var parser = new Parser(result);
                test.equal(parser.readUInt8(), 0xFE);
                test.equal(parser.readUInt8(), 0x00);
                redis.quit();
                test.done();
            });
        });
    },

    testDataDetail: function (test) {
        var parser = new Parser(stub.buildInit(stub.initData).get());
        var data2 = action.parse(client, parser);
        action.process(client, data2, function (result) {
            test.equal(result.status, 0);
            var redis = Redis.createClient();

            redis.publish('cluster:app:0:dataDetail', JSON.stringify({
                type: 'listen',
                sendId: 0
            }));
            client.once('write', function (client, result) {
                redis.publish('cluster:app:0:dataDetail', JSON.stringify({
                    type: 'stop',
                    sendId: 0
                }));
                redis.quit();
                test.done();
            });
        });
    }
};
