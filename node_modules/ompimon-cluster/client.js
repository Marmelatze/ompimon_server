/**
 * @module ompimon
 * @submodule ompimon-cluster
 */

var
    eventEmitter = require('events').EventEmitter,
    util = require("util"),
    _ = require("underscore"),
    BufferStack = require("./BufferStack")

    ;


module.exports = Client;

/**
 *
 * @class Client
 * @namespace Ompimon.Cluster
 *
 * @param socket {Socket}
 * @constructor
 */
function Client (socket) {
    eventEmitter.call(this);
    this.init(socket);
}

util.inherits(Client, eventEmitter);

_.extend(Client.prototype, {
    /**
     * Socket of client
     * @property socket
     * @type Socket
     */
    socket: null,
    /**
     * Whether this client is authenticated
     * @property authenticated
     * @type Boolean
     * @default false
     */
    authenticated: false,

    /**
     * Id of the current app, if authenticated
     * @property appId
     * @type Integer
     */
    appId: 0,

    /**
     * Ranks of this node
     * @property ranks
     * @type Array
     */
    ranks: [],

    /**
     * Counter functions
     * @property counterFunctions
     * @type Array
     */
    counterFunctions: [],

    /**
     * Cluster send functions
     * @property sendFunctions
     * @type Array
     */
    sendFunctions: [],

    /**
     * fired when something is send to client
     * @event send
     * @param data {Buffer}
     */
    onSend: null,

    /**
     * Buffers received by this client
     * @property buffers
     * @type Ompimon.Cluster.BufferStack
     */
    buffers: null,
    init: function(socket) {
        var self = this;
        this.socket = socket;
        this.buffers = new BufferStack();

    },

    /**
     * Send buffer to client
     * @method send
     * @param data {Buffer}
     */
    send: function(data) {
        this.socket.write(data);
        process.nextTick(function() {
            this.emit('send', data);
        }.bind(this));
    }



});