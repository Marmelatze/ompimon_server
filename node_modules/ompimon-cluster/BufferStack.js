/**
 * @module ompimon
 * @submodule ompimon-cluster
 */
var
    util = require("util"),
    eventEmitter = require('events').EventEmitter,
    Buffer = require("buffer").Buffer,
    _ = require("underscore")
;

module.exports = BufferStack;

/**
 * Holds buffers received by a client for later parsing.
 *
 * @class BufferStack
 * @namespace Ompimon.Cluster
 * @constructor
 * @author Florian Pfitzer<pfitzer@w3p.cc>
 */
function BufferStack() {
    eventEmitter.call(this);
}

util.inherits(BufferStack, eventEmitter);

_.extend(BufferStack.prototype, {
    /**
     * Holds a buf
     * @private
     * @property stack
     * @type Buffer
     */
    stack: [],

    /**
     * true if the last message on the stack was only transmitted partial
     * @property partial
     * @type boolean
     */
    partial: false,
    /**
     * Length of the last partial message
     * @property partialLength
     * @type Integer
     */
    partialLength: 0,
    /**
     * Push a new buffer to the stack
     * fires an pushed event
     * @param buffer {Buffer}
     * @method push
     *
     */
    push: function(buffer) {
        if (!this.partial) {
            var length = buffer.readUInt32BE(0);
            this.stack.push(buffer.slice(4));
            console.log(buffer.length - 4,'>', length);
            if (buffer.length -4 > length) {
                this.partial = true;
                this.partialLength = length;

                return;
            }
            process.nextTick(function() {
                this.emit('pushed', this);
            }.bind(this));

            return;
        }

        if (buffer.length <= this.partialLength) { // new buffer fits completly into partial buffer
            
        }

    },

    /**
     * Return the whole stack as buffer
     *
     * @method getBuffer
     * @return {Buffer}
     */
    pop: function() {
        if (this.empty()) {
            return null;
        }

        var message = this.stack.splice(0, 1);

        return message[0];
    },
    /**
     * returns true if stack is empty
     * @method empty
     * @return boolean
     */
    empty: function() {
        return this.stack.length == 0;
    },

    /**
     * Clear the buffer
     * @method clear
     */
    clear: function() {
        this.stack = [];
    },

    /**
     * Will be fired if a new buffer is pushed to the stack
     *
     * @event pushed
     */
    onPushed: function() {}
});

