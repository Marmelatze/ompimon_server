/**
 * @module ompimon
 * @submodule ompimon-cluster
 */

var eventEmitter = require('events').EventEmitter,
    net = require('net'),
    client = require('./client'),
    Protocol = require('ompimon-protocol'),
    crypto = require("crypto"),
    BufferBuilder = require('buffer-builder'),

    Monitor = require("ompimon-monitor"),

    util = require("util"),
    _ = require("underscore")
;




module.exports = Worker;

/**
 * @class Worker
 * @namespace Ompimon.Cluster
 *
 * @param port {Integer} Port this worker listens to
 * @param [start=true] {Boolean} Whether to start the worker immediately
 * @constructor
 */
function Worker (port, start) {
    start = typeof start !== 'undefined' ? start : true;
    eventEmitter.call(this);
    /**
     * Port this worker listens to
     * @property port
     * @type {Integer}
     */
    this.port = port;
    if (start) {
        this.start();
    }
}

util.inherits(Worker, eventEmitter);

_.extend(Worker.prototype, {
    /**
     * Start listening to incomming connections
     *
     * @method start
     */
    start: function() {
        global.monitor = new Monitor('cluster_node', process.pid);

        this.protocol = new Protocol();

        this.protocol.on('send', function(client, data) {
            client.write(data);
        });

        var self = this;
        var server = net.createServer(function (c) { //'connection' listener
            var clientInstance = new client(c);

            self.connect(clientInstance);
            c.on('end', function () {
                console.log('client '+clientInstance.id+' disconnected');
                monitor.removeComponent('cluster', clientInstance.id);
                clientInstance.quit();
                clientInstance = null;
            });

        });


        server.listen(this.port, function () { //'listening' listener
            console.log("Server started on port " + self.port);
        });
    },

    /**
     * Handle connection of new clients
     *
     * @method connect
     * @param client {Ompimon.Cluster.Client}
     */
    connect: function(client) {
        var self = this;

        console.log("client "+ client.id+" connected");
        monitor.addComponent("cluster", client.id);

        client.socket.on('data', function(data) {
            self.process(client, data);
        });

        client.buffers.on('pushed', function(buffers) {
            this.protocol.parseCluster(client);
        }.bind(this));
    },

    /**
     * Process received messages
     *
     * @method process
     * @param client {Ompimon.Cluster.process}
     * @param data {Buffer}
     * @param [callback] {Function}
     */
    process: function(client, data, callback) {
        var string = data.toString('utf-8').trim().replace(/(\r\n|\n|\r)/gm,"");
        console.log("received from " + client.id+":");
        console.log(data);
        //console.log(string);

        if (callback) {
            client.once('parsed', callback);
        }

        client.buffers.push(data);
    }
});