var
    Worker = require("../worker"),
    Client = require('../client'),
    procotolStub = require("ompimon-protocol/test-stub"),
    Auth = require("ompimon-auth"),

    BufferBuilder = require("buffer-builder"),
    Parser = require("ompimon-protocol/parser")


;

Auth.auth.type = 'test';

client = new Client(new Buffer(256));
client.id = "1234567890yyyasdfasdfasdfasdfasd";

client.socket = {
    content: null,
    writeCount: 0,
    write: function(data) {
        this.writeCount++;
        this.content = data;
    },
    on: function() {

    }
};


var worker = new Worker(1234, false);

worker.connect(client);

module.exports = {
    testProcess: function(test) {
        var data = procotolStub.buildInit(procotolStub.initData).get();
        var builder = new BufferBuilder();
        builder.appendUInt8(0x01); // init
        builder.appendBuffer(data);

        var buffer = builder.get();

        worker.process(client, buffer);
        client.once('send', function(data) {
            var parser = new Parser(data);
            test.equal(parser.readUInt8(), 0x01);
            test.equal(parser.readUInt8(), 0x00);

            test.done();

        });
    },

    testProcessMultiple: function(test) {
        var data = procotolStub.buildInit(procotolStub.initData).get();

        client.authenticated = true;
        var builder = new BufferBuilder();
        builder.appendUInt8(0x01); // send
        builder.appendBuffer(data);
        var sendData = procotolStub.buildSend(procotolStub.sendData).get();
        builder.appendUInt8(0x02);
        builder.appendBuffer(sendData);

        var buffer = builder.get();

        var count = 0;

        var func = function(data) {
            var parser = new Parser(data);
            if (count == 0) {
                test.equal(parser.readUInt8(), 0x01, "wrong order");
                test.equal(parser.readUInt8(), 0x00, "init should return success");
            } else if (count == 1) {
                test.equal(parser.readUInt8(), 0x02, "wrong order");
                test.equal(parser.readUInt8(), 0x00, "data should return success");

                client.removeListener('send', func);
                test.done();
            }
            count++;
        };
        client.on('send', func);
        worker.process(client, buffer);
    },

    testPartial: function (test) {
        var data = procotolStub.buildInit(procotolStub.initData).get();
        var builder = new BufferBuilder();
        builder.appendUInt8(0x01); // send
        builder.appendBuffer(data);


        var buffer = builder.get();
        var length = Math.floor(buffer.length/2);
        var count = 0;

        client.once('send', function (data) {
            var parser = new Parser(data);
            test.equal(parser.readUInt8(), 0x01);
            test.equal(parser.readUInt8(), 0x00, "init failed");
            test.done();
        });

        worker.process(client, buffer.slice(0, length));
        worker.process(client, buffer.slice(length, buffer.length));
    }
};