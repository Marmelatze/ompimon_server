var
    Worker = require("../worker"),
    Client = require('../client'),
    procotolStub = require("ompimon-protocol/test-stub"),
    Auth = require("ompimon-auth"),

    BufferBuilder = require("buffer-builder"),
    Parser = require("ompimon-protocol/parser")


;

Auth.auth.type = 'test';

client = new Client(new Buffer(256));
client.id = "1234567890yyyasdfasdfasdfasdfasd";

client.socket = {
    content: null,
    writeCount: 0,
    write: function(data) {
        this.writeCount++;
        this.content = data;
    },
    on: function() {

    }
};


var worker = new Worker(1234, false);

worker.connect(client);

module.exports = {
    testProcess: function(test) {
        var data = procotolStub.buildInit(procotolStub.initData).get();
        var builder = new BufferBuilder();
        builder.appendUInt8(0x01); // init
        builder.appendBuffer(data);

        var buffer = builder.get();

        worker.process(client, buffer, function() {
            var result = client.socket.content;
            var parser = new Parser(result);
            test.equal(parser.readUInt8(), 0x01);
            test.equal(parser.readUInt8(), 0x00);

            test.done();

        });
    },

    testProcessMultiple: function(test) {
        var data = procotolStub.buildInit(procotolStub.initData).get();

        client.authenticated = true;
        var builder = new BufferBuilder();
        builder.appendUInt8(0x01); // send
        builder.appendBuffer(data);
        var sendData = procotolStub.buildSend(procotolStub.sendData).get();
        builder.appendUInt8(0x02);
        builder.appendBuffer(sendData);

        var buffer = builder.get();

        var count = client.socket.writeCount;
        worker.process(client, buffer, function() {
            test.equal(client.socket.writeCount - count, 2);
            test.done();
        });
    },

    testPartial: function (test) {
        var data = procotolStub.buildInit(procotolStub.initData).get();
        var builder = new BufferBuilder();
        builder.appendUInt8(0x01); // send
        builder.appendBuffer(data);

        console.log("\n\n\n");

        var buffer = builder.get();
        var length = Math.floor(buffer.length/2);
        var count = client.socket.writeCount;

        worker.process(client, buffer.slice(0, length));
        worker.process(client, buffer.slice(length, buffer.length));
        test.equal(client.socket.writeCount - count, 1);

        test.done();
    }
};