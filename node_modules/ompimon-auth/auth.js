/**
 * @module ompimon
 * @submodule ompimon-auth
 */


var eventEmitter = require('events').EventEmitter,
    http = require('http')
;


/**
 * Authentication class
 * @class Auth
 * @namespace Ompimon.Auth
 * @param type default: http. Can be one of http or test. Http authenticates against http backend.
 * @constructor
 */
function Auth(type) {
    eventEmitter.call(this);
    this.type = type || 'http';
}

// inherit events.EventEmitter
Auth.super_ = eventEmitter;
Auth.prototype = Object.create(eventEmitter.prototype, {
    constructor: {
        value: Auth,
        enumerable: false
    }
});

/**
 * Authenticate a user
 * @method authenticate
 *
 * @async
 * @param type {String} Type of the user. Android or Cluster
 * @param user {String}
 * @param password {String}
 * @param callback {Function} will be called if authentication is successfull
 * @param errorCallback {Function} will be called if authentication failed
 * @return {Ompimon.Auth.Auth}
 */
Auth.prototype.authenticate = function(type, user, password, callback, errorCallback) {
    switch (this.type) {
        case 'http':
            this.authenticateHTTP(type, user, password, callback, errorCallback);
            break;
        case 'test':
            this.authenticateTest(type, user, password, callback, errorCallback);
            break;
    }

    return this;
};

/**
 * Authenticate a user against the http backend
 *
 * @method authenticateHTTP
 * @async
 *
 * @param type {String}
 * @param user {String}
 * @param password {String}
 * @param callback {Function}
 * @param errorCallback {Function}
 * @return {Ompimon.Auth.Auth}
 */
Auth.prototype.authenticateHTTP = function(type, user, password, callback, errorCallback) {
    var self = this;
    http.get({
        hostname: "localhost",
        port: 3000,
        path: "/auth/" + type + "/" + user + "/" + password,
        agent: false // with true connections dies after a few tries
    }, function(res) {
        if (200 == res.statusCode) {
            callback();
        } else {
            errorCallback();
        }
    }).on('error', function(e) {
        console.log(e);
        errorCallback();
    });

    return this;
};

/**
 * Dummy authentication function used for unit testing
 *
 * @method authenticateTest
 * @async
 *
 * @param type {String}
 * @param user {String}
 * @param password {String}
 * @param callback {Function}
 * @param errorCallback {Function}
 * @return {Ompimon.Auth.Auth}
 */
Auth.prototype.authenticateTest = function(type, user, password, callback, errorCallback) {
    if (user == "test" && password == "test") {
        callback();
    } else {
        errorCallback();
    }

    return this;
};

exports.auth = new Auth();
