/**
 * @module ompimon
 * @submodole ompimon-storage
 */

var _ = require("underscore"),
    redis = require("redis"),
    rclient = redis.createClient(),
    publishClient = redis.createClient(),
    Int64 = require('node-int64'),
    async = require('async');

var expireTime = 1800; //30 min


/**
 * @class Storage
 * @namespace Ompimon.Storage
 * @constructor
 */
function Storage() {

}


_.extend(Storage.prototype, {
    /**
     * @method clearAllData
     * @param callback {Function}
     * @async
     */
    clearAllData: function(callback){
        this._deleteKeys("app*",callback);
    },

    /**
     * @method getConnection
     * @returns {Object}
     * @async
     */
    getConnection: function(){
        return rclient;
    },

    /**
     * @method killConnection
     * @async
     */
    killConnection: function(){
        rclient.quit();
        publishClient.quit();
    },

    /*
     //EXAMPLE data Arg
     var data = {
     protocolVersion: 0x01,
     username: "test",
     password: "test",
     app: "Meine Tolle Applikation",
     processes: 123782,
     nodes: 1010000,
     nodeId: 0,
     ranks: [
     123, 495
     ],
     counters: [
     "broadcast",
     "barrier"
     ],
     sends: [
     "ibsend",
     "bsend",
     "irsend"
     ],
     features: {
     restart: true,
     abort: true
     }
     };*/

    /**
     * initialized a Node of a Application - for Protocol ActionId 0x01
     *
     * @method initAction
     * @param data {Object} object with the init data
     * @param callback {Function}
     * @async
     */
    initAction: function(data, callback){
        rclient.LRANGE("apps",0, -1, function(err, apps){
            var applen = 0;
            var appId = null;
            if(apps != null){
                applen = apps.length;
                for(var i = 0; i < applen;i++){
                    var appName = apps[i];
                    console.log("Appname: ", appName);
                    if(appName == data.app){
                        appId = i;
                    }
                    if(appId != null){
                        break;
                    }
                }
            }
            if(appId == null){
                rclient.RPUSH("apps", data.app);
                rclient.HMSET("app:"+applen,{
                    processes: data.processes,
                    nodes: data.nodes,
                    restart: data.features.restart,
                    abort: data.features.abort
                });
                appId = applen;
            }

            var nodeId = data.nodeId;

            rclient.SADD("app:"+appId+":nodes", nodeId);

            data.ranks.forEach(function(value) {
                rclient.SADD("app:"+appId+":node:"+nodeId+":ranks", value);
                //app/X/rank/Y/node = Z
                rclient.SET("app:"+appId+":rank:"+value+":node", nodeId);

                rclient.SADD("app:"+appId+":ranks", value);
            });

            if(nodeId == 0){
                rclient.DEL("app:"+appId+":counters", function(){
                    data.counters.forEach(function(value){
                        rclient.RPUSH("app:"+appId+":counters", value);
                    });
                });

                rclient.DEL("app:"+appId+":sends", function(){
                    data.sends.forEach(function(value){
                        rclient.RPUSH("app:"+appId+":sends", value);
                    });
                });

            }
            callback(null, appId);
        });
    },

    /*
     //EXAMPLE data Arg
     var data = [
     {
     rank: 13,
     counters: {
     broadcast: 123123,
     barrier: 4234234
     },
     data: [
     {
     rank: 2,
     counter: 12344,
     size: 237373
     },
     {
     rank: 3,
     counter: 123123,
     size: 2020203
     }
     ]
     },
     {
     rank: 24,
     counters: {
     broadcast: 595959,
     barrier: 202340234
     },
     data: [
     {
     rank: 1,
     counter: 123123855,
     size: 2034
     }
     ]
     }
     ];*/

    /**
     * for Protocol ActionId 0x02
     *
     * @method receiveAction
     * @param appId {Integer} ID of the Application
     * @param data {Object} received data
     * @param callback {Function}
     * @async
     */
    receiveAction: function(appId, data, callback){
        var self = this;
        var tasks = [];
        var messageContainer = [];
        data.forEach(function(rankData){
            _.each(rankData.counters, function(countVal, funcName) {
                tasks.push(function(callback) {
                    self._setCounterData(appId, rankData.rank, funcName, countVal, function(message){
                        messageContainer.push(message);
                        callback();
                    });
                });
            });

            rankData.data.forEach(function(sendData){
                tasks.push(function(callback) {
                    self._setSendData(appId, rankData.rank, sendData, function(message){
                        messageContainer.push(message);
                        callback();
                    });
                });
            });
        });


        async.parallel(tasks, function(){
            self._publishMessage(appId, messageContainer);
            callback();
        });
    },

    /*
     var data = [
     {
     rank: 13,
     functions: {
     ibsend: [
     {
     rank: 2,
     counter: new Int64(123),
     size: new Int64(1231234)
     },
     {
     rank: 3,
     counter: new Int64(47474),
     size: new Int64(2349)
     }
     ],
     bsend: [
     {
     rank: 4,
     counter: new Int64(2349),
     size: new Int64(239492)
     }
     ]
     }
     },
     {
     rank: 24,
     functions: {
     ibsend: [
     {
     rank: 1,
     counter: new Int64(123123),
     size: new Int64(349234)
     }
     ],
     bsend: [
     ]
     }
     }
     ];*/

    /**
     * for Protocol ActionId 0x03
     *
     * @method receiveDetailsAction
     * @param appId {Integer} ID of the Application
     * @param data {Object} received data
     * @param callback {Function}
     * @async
     */
    receiveDetailsAction: function(appId, data, callback){
        var self = this;
        var messageContainer = [];
        var tasks = [];
        data.forEach(function(rankData){
            _.each(rankData.functions, function(sendDataList, funcName){
                _.each(sendDataList, function(sendData){
                    tasks.push(function(callback){
                        self._setSendDetailData(appId, rankData.rank, funcName, sendData, function(message){
                            messageContainer.push(message);
                            callback();
                        });
                    });
                });
            });
        });
        async.parallel(tasks, function(){
            self._publishMessage(appId, messageContainer);
            callback();
        });
    },

/*
{
    sendId: 1,
        ranks: [
    {
        rank: 1,
        data: [
            {
                rank: 2,
                counter: 13939,
                size: 494949
            },
            {
                rank: 3,
                counter: 492384,
                size: 2348234
            }
        ]
    },
    {
        rank: 2,
        data: [
            {
                rank: 1,
                counter: 2383,
                size: 2384234
            },
            {
                rank: 3,
                counter: 2394234,
                size: 1239
            }
        ]
    }
]
}
    */


    receiveSingleDetailsAction: function(appId, data, callback){
        var self = this;
        var messageContainer = [];
        var tasks = [];
        this._getSendFunctionById(appId, data.sendId, function(funcName){
            data.ranks.forEach(function(rankData){
                _.each(rankData.data, function(sendData){
                    tasks.push(function(callback){
                        self._setSendDetailData(appId, rankData.rank, funcName, sendData, function(message){
                            messageContainer.push(message);
                            callback();
                        });
                    });
                });

            });
            async.parallel(tasks, function(){
                self._publishMessage(appId, messageContainer);
                callback();
            });
        });
    },

    /**
     * @method getRanks
     * @param appId {Integer}
     * @param callback {Function}
     * @async
     */
    getRanks: function(appId, callback){
        rclient.SMEMBERS("app:"+appId+":ranks", callback);
    },

    /**
     *
     * @method getCounterFunctions
     * @param appId {Integer}
     * @param callback {Function}
     * @async
     */
    getCounterFunctions: function(appId, callback){
        rclient.LRANGE("app:"+appId+":counters",0,-1,callback);

    },

    /**
     * @method getSendFunctions
     * @param appId {Integer}
     * @param callback {Function}
     * @async
     */
    getSendFunctions: function(appId, callback){
        rclient.LRANGE("app:"+appId+":sends",0,-1,callback);
    },

    /**
     * @method getApplications
     * @param callback {Function}
     * @async
     */
    getApplications: function(callback){
        rclient.LRANGE("apps",0, -1, callback);
    },

    /**
     * @method getApplicationDetails
     * @param appId {Integer}
     * @param callback {Function}
     * @async
     */
    getApplicationDetails: function(appId, callback){
        rclient.HGETALL("app:"+appId, callback);
    },

    /**
     * @method getCounterData
     * @param appId {Integer}
     * @param counterId {Integer}
     * @param callback {Function}
     * @async
     */
    getLastCounterData: function(appId, counterId, callback){
        var self = this;
        var result = [];

        self._getCounterFunctionById(appId, counterId, function(funcName){
            if(funcName != ""){
                self.getRanks(appId, function(err, ranks){
                    if(ranks.length > 0){
                        var tasks = [];
                        _.each(ranks, function (rank, i) {
                            tasks.push(function(callback){
                                var prefix = "app:" + appId + ":rank:" + rank + ":counter:" + funcName;
                                rclient.GET(prefix, function (err, valueId) {
                                    if(valueId != null){
                                        rclient.HGETALL(prefix + ":value:" + valueId,
                                            function (err, valueData) {
                                                result.push(valueData);
                                                callback(err);
                                            });
                                    }else{
                                        callback(null);
                                    }
                                });
                            });
                        });
                        async.parallel(tasks,function(err){
                            callback(err, result);
                        });
                    }else{
                        callback(null, []);
                    }

                });
            }else{
                callback(null,[]);
            }
        });
    },

    /**
     * @method getCounterData
     * @param appId {Integer}
     * @param counterId {Integer}
     * @param rankId {Integer}
     * @param callback {Function}
     * @async
     */
    getCounterData: function(appId, counterId, rankId, callback){
        this._getCounterFunctionById(appId,counterId, function(funcName){
            rclient.KEYS("app:" + appId + ":rank:" + rankId + ":counter:" + funcName + ":*",
                function (err, values) {
                    var result = [];
                    var rounds = values.length - 1;
                    if(values.length != 0){
                        _.each(values, function(key, i){
                            rclient.HGETALL(key, function(err, valueData){
                                result.push(valueData);
                                if(i >= rounds){
                                    callback(null, result);
                                }
                            });
                        });
                    }else{
                        callback(null, []);
                    }
                });
        });

    },

    /**
     * @method getLastSendData
     * @param appId {Integer}
     * @param sendId {Integer}
     * @param callback {Function}
     * @async
     */
    getLastSendData: function(appId, sendId, callback){
        var self = this;
        var result = [];


        async.waterfall([
            function(callback){
                self._getSendFunctionById(appId, sendId, function(funcName){
                    callback(null, funcName);
                });
            },
            function(funcName, callback){
                self.getRanks(appId, function(err, ranks){
                    callback(err, ranks, funcName);
                });
            },
            function (ranks, funcName, callback) {
                if(ranks.length > 0){
                    var mainTasks = [];
                    _.each(ranks, function (rank, j) {
                        mainTasks.push(function(callback){
                            var prefix = "app:" + appId + ":rank:" + rank + ":to";
                            self._getReceiveRanks(appId, rank, function(err, reseiceRanks){
                                if(reseiceRanks.length != 0){
                                    var tasks = [];
                                    _.each(reseiceRanks, function(toRank, i){
                                        tasks.push(function(callback){

                                            var prefix2 = prefix +":"+ toRank+":"+funcName;
                                            rclient.GET(prefix2, function (err, valueId) {
                                                if(valueId != null){
                                                    rclient.HGETALL(
                                                        prefix2 + ":value:" + valueId,
                                                        function (err, valueData) {
                                                            result.push(valueData);
                                                            callback(err);
                                                        });
                                                }else{
                                                    callback(null);
                                                }
                                            });
                                        });
                                    });
                                    async.parallel(tasks, callback);
                                }else{
                                    callback(null);
                                }
                            });
                        });
                    });
                    async.parallel(mainTasks, callback);
                }else{
                   callback(null);
                }
            }
        ],function(err){

            callback(err, result);
        });
    },

    /**
     * @method getSendData
     * @param appId {Integer}
     * @param sendId {Integer}
     * @param rankId {Integer}
     * @param callback {Function}
     * @async
     */
    getSendData: function(appId, sendId, rankId, callback){
        var self = this;
        var result = [];

        async.waterfall([
            function(callback){
                self._getSendFunctionById(appId, sendId, function(funcName){
                    callback(null, funcName);
                });
            },
            function(funcName, callback){
                self._getReceiveRanks(appId, rankId, function(err, reseiceRanks){
                    callback(null, funcName, reseiceRanks);
                });
            },
            function(funcName, reseiceRanks, callback){
                var prefix = "app:" + appId + ":rank:" + rankId + ":to";

                var mainTasks = [];
                _.each(reseiceRanks, function(toRank){
                    mainTasks.push(function(callback){
                        var prefix2 = prefix +":"+ toRank+":"+funcName+":value:";

                        async.waterfall([
                            function(callback){
                                rclient.KEYS(prefix2+"*", function (err, keys) {
                                    callback(err, keys);
                                });
                            },
                            function(keys, callback){

                                var tasks = [];
                                _.each(keys, function (key) {
                                    tasks.push(function(callback) {
                                        rclient.HGETALL(key, function (err, valueData) {
                                            result.push(valueData);
                                            callback();
                                        });
                                    });
                                });

                                async.parallel(tasks, callback);
                            }
                        ],function(err){
                            callback(err);
                        });
                    });
                });
                async.parallel(mainTasks, callback);


            }
        ],function(err){
            callback(err, result);
        });
    },

    /**
     * @method _getReceiveRanks
     * @param appId {Integer}
     * @param rankId {Integer}
     * @param callback {Function}
     * @private
     * @async
     */
    _getReceiveRanks: function(appId, rankId, callback){
        rclient.SMEMBERS("app:"+appId+":rank:"+rankId+":to",callback);
    },

    /**
     * @method _getCounterFunctionById
     * @param appId {Integer}
     * @param counterId {Integer}
     * @param callback {Function}
     * @private
     * @async
     */
    _getCounterFunctionById: function(appId, counterId, callback){
        this.getCounterFunctions(appId, function(err, list){
            if(list.length <= counterId){
                callback("");

            }else{
                callback(list[counterId]);
            }
        });
    },

    /**
     * @method _getSendFunctionById
     * @param appId {Integer}
     * @param sendId {Integer}
     * @param callback {Function}
     * @private
     * @async
     */
    _getSendFunctionById: function(appId, sendId, callback){
        if(sendId == null){
            callback("send");
        }else{
            this.getSendFunctions(appId, function(err, list){
                if(list.length <= sendId){
                    callback("send");
                }else{
                    callback(list[sendId]);
                }

            });
        }

    },

    /**
     * stores the counter data for a rank
     *
     * @method _setCounterData
     * @param appId {Integer}
     * @param rankId {Integer}
     * @param funcName {String}
     * @param countValue {Integer}
     * @param callback {Function}
     * @private
     * @async
     */
    _setCounterData: function(appId, rankId, funcName, countValue, callback){
        var self = this;
        var prefix = "app:"+appId+":rank:"+rankId+":counter:"+funcName;

        rclient.INCR(prefix, function(err, i){

            var message = {
                "type": "counter",
                "rank": rankId,
                "value": countValue,
                "timestamp": new Date().getTime()
            };

            rclient.HMSET(prefix+":value:"+i, message);
            rclient.EXPIRE(prefix+":value:"+i, expireTime);
            //self._publishMessage(appId, message);
            callback(message);
        })
    },

    /**
     * stores the send data for a rank
     *
     * @method _setSendData
     * @param appId {Integer}
     * @param rankId {Integer}
     * @param data {Object}
     * @param callback {Function}
     * @private
     * @async
     */
    _setSendData: function(appId, rankId, data, callback){
        this._setSendDetailData(appId, rankId, "send", data, callback);
    },


    /*
     {
     rank: 13,
     functions: {
     ibsend: [
     {
     rank: 2,
     counter: 123,
     size: 1231234
     },
     {
     rank: 3,
     counter: 47474,
     size: 2349
     }
     ],
     bsend: [
     {
     rank: 4,
     counter: 2349,
     size: 239492
     }
     ]
     }

     */

    /**
     * stores the send (detail) data for a rank
     *
     * @method _setSendDetailData
     * @param appId {Integer}
     * @param rankId {Integer}
     * @param funcName {String}
     * @param data {Object}
     * @param callback {Function}
     * @private
     * @async
     */
    _setSendDetailData: function(appId, rankId, funcName, data, callback){
        var self = this;
        var prefix = "app:"+appId+":rank:"+rankId+":to";

        rclient.SADD(prefix, data.rank,function(err){
            rclient.INCR(prefix+":"+data.rank+":"+funcName, function(err, i){
                var message = {
                    "type": "send",
                    "funcName": funcName,
                    "rank": rankId,
                    "toRank": data.rank,
                    "counter": data.counter,
                    "size": data.size,
                    "timestamp": new Date().getTime()
                };
                rclient.HMSET(prefix+":"+data.rank+":"+funcName+":value:"+i, message);
                rclient.EXPIRE(prefix+":"+data.rank+":"+funcName+":value:"+i, expireTime);
                //self._publishMessage(appId, message);
                callback(message);
            });
        });
    },

    /**
     * deletes all keys that match the pattern
     *
     * @method _deleteKeys
     * @param pattern {String}
     * @param callback {Function}
     * @private
     * @async
     */
    _deleteKeys: function(pattern, callback){
        var multi = rclient.MULTI();
        rclient.KEYS(pattern, function(err, appKeys){
            appKeys.forEach(function(keyname){
                multi.DEL(keyname);
            });
            multi.exec(callback);

        });
    },

    /**
     * publish a Data String for a Application
     *
     * @method _publishMessage
     * @param appId {Integer}
     * @param data {Object}
     * @private
     * @async
     */
    _publishMessage: function(appId, data){
        var messageString = JSON.stringify(data);
        publishClient.publish("client:app:"+appId, messageString);
    }
});

module.exports = new Storage;

