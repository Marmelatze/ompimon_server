var _ = require("underscore")._,
    redis = require("redis"),
    rclient = redis.createClient(),
    Int64 = require('node-int64');

var expireTime = 1800; //30 min


exports.clearAllData = function(callback){
    _deleteKeys("app*",callback);
};


/*
//EXAMPLE data Arg
 var data = {
 protocolVersion: 0x01,
 username: "test",
 password: "test",
 app: "Meine Tolle Applikation",
 processes: 123782,
 nodes: 1010000,
 nodeId: 0,
 ranks: [
 123, 495
 ],
 counters: [
 "broadcast",
 "barrier"
 ],
 sends: [
 "ibsend",
 "bsend",
 "irsend"
 ],
 features: {
 restart: true,
 abort: true
 }
 };*/

/**
 * initialized a Node of a Application - for Protocol ActionId 0x01
 *
 * @param data object with the init data
 * @param callback
 */
exports.initAction = function(data, callback){

    rclient.SMEMBERS("apps", function(err, apps){
        var applen = 0;
        var appId = null;
        console.dir(apps);
        if(apps != null){
            applen = apps.length;
            for(var i = 0; i < applen;i++){
                var appName = apps[i];
                console.log("Appname: ", appName);
                if(appName == data.app){
                    appId = i;
                }
                if(appId != null){
                    break;
                }
            }
        }
        if(appId == null){
            rclient.SADD("apps", data.app);
            rclient.HMSET("app:"+applen,{
                processes: data.processes,
                nodes: data.nodes,
                restart: data.features.restart,
                abort: data.features.abort
            });
            appId = applen;
        }

        var nodeId = data.nodeId;

        rclient.SADD("app:"+appId+":nodes", nodeId);

        //app/X/node/Z/ranks = {y1, y2, y3, ...}
        data.ranks.forEach(function(value) {
            rclient.SADD("app:"+appId+":node:"+nodeId+":ranks", value);
            //app/X/rank/Y/node = Z
            rclient.SET("app:"+appId+":rank:"+value+":node", nodeId);
        });

        if(nodeId == 0){
            data.counters.forEach(function(value){
                rclient.SADD("app:"+appId+":counters", value);
            });
            data.sends.forEach(function(value){
                rclient.SADD("app:"+appId+":sends", value);
            });
        }
        callback(appId);
    });
};

/*
//EXAMPLE data Arg
var data = [
    {
        rank: 13,
        counters: {
            broadcast: 123123,
            barrier: 4234234
        },
        data: [
            {
                rank: 2,
                counter: 12344,
                size: 237373
            },
            {
                rank: 3,
                counter: 123123,
                size: 2020203
            }
        ]
    },
    {
        rank: 24,
        counters: {
            broadcast: 595959,
            barrier: 202340234
        },
        data: [
            {
                rank: 1,
                counter: 123123855,
                size: 2034
            }
        ]
    }
];*/

/**
 * for Protocol ActionId 0x02
 *
 * @param appId ID of the Application
 * @param data received data
 * @param callback
 */
exports.receiveAction = function(appId, data, callback){
    data.forEach(function(rankData){
        _.each(rankData.counters, function(countVal, funcName) {
            _setCounterData(appId, rankData.rank, funcName, countVal, function(){});
        });

        rankData.data.forEach(function(sendData){
            _setSendData(appId, rankData.rank, sendData, function(){});
        });
    });

    callback();
};
/*
var data = [
    {
        rank: 13,
        functions: {
            ibsend: [
                {
                    rank: 2,
                    counter: new Int64(123),
                    size: new Int64(1231234)
                },
                {
                    rank: 3,
                    counter: new Int64(47474),
                    size: new Int64(2349)
                }
            ],
            bsend: [
                {
                    rank: 4,
                    counter: new Int64(2349),
                    size: new Int64(239492)
                }
            ]
        }
    },
    {
        rank: 24,
        functions: {
            ibsend: [
                {
                    rank: 1,
                    counter: new Int64(123123),
                    size: new Int64(349234)
                }
            ],
            bsend: [
            ]
        }
    }
];*/

/**
 * for Protocol ActionId 0x03
 *
 * @param appId ID of the Application
 * @param data received data
 * @param callback
 */
exports.receiveDetailsAction = function(appId, data, callback){
    data.forEach(function(rankData){
        _.each(rankData.functions, function(sendDataList, funcName){
            _.each(sendDataList, function(sendData){
                _setSendDetailData(appId, rankData.rank, funcName, sendData, callback);
            });
        });
    });
};

/**
 * stores the counter data for a rank
 *
 * @param appId
 * @param rankId
 * @param funcName
 * @param countValue
 * @param callback
 * @private
 */
_setCounterData = function(appId, rankId, funcName, countValue, callback){
    var prefix = "app:"+appId+":rank:"+rankId+":counter:"+funcName;

    rclient.INCR(prefix, function(err, i){

        var message = {
            "value": countValue,
            "timestamp": new Date().getTime()
        };

        rclient.HMSET(prefix+":value:"+i, message);
        rclient.EXPIRE(prefix+":value:"+i, expireTime);
        _publishMessage(appId, message);
        callback();
    });
};

/**
 * stores the send data for a rank
 *
 * @param appId
 * @param rankId
 * @param data
 * @param callback
 * @private
 */
_setSendData = function(appId, rankId, data, callback){
    _setSendDetailData(appId, rankId, "send", data, callback);
};

/*
{
    rank: 13,
    functions: {
    ibsend: [
        {
            rank: 2,
            counter: 123,
            size: 1231234
        },
        {
            rank: 3,
            counter: 47474,
            size: 2349
        }
    ],
        bsend: [
        {
            rank: 4,
            counter: 2349,
            size: 239492
        }
    ]
}

*/

/**
 * stores the send (detail) data for a rank
 *
 * @param appId
 * @param rankId
 * @param funcName
 * @param data
 * @param callback
 * @private
 */
_setSendDetailData = function(appId, rankId, funcName, data, callback){
    var prefix = "app:"+appId+":rank:"+rankId+":to:"+data.rank+":"+funcName;

    rclient.INCR(prefix, function(err, i){
        var message = {
            "rank": data.rank,
            "counter": data.counter,
            "size": data.size,
            "timestamp": new Date().getTime()
        };
        rclient.HMSET(prefix+":value:"+i, message);
        rclient.EXPIRE(prefix+":value:"+i, expireTime);
        _publishMessage(appId, message);
        callback();
    });
};

/**
 * deletes all keys that match the pattern
 *
 * @param pattern
 * @param callback
 * @private
 */
_deleteKeys = function(pattern, callback){
    var multi = rclient.MULTI();
    rclient.KEYS(pattern, function(err, appKeys){
        appKeys.forEach(function(keyname){
            multi.DEL(keyname);
        });
        multi.exec(callback);

    });
};

/**
 * publish a Data String for a Application
 *
 * @param appId
 * @param data
 * @private
 */
_publishMessage = function(appId, data){
    var messageString = JSON.stringify(data);
    rclient.publish("appChannel:"+appId, messageString);
};