var _ = require("underscore")._,
    redis = require("redis"),
    Int64 = require('node-int64'),
    bignum = require('bignum'),
    rclient = redis.createClient();

var expireTime = 1800; //30 min

/*
//EXAMPLE data Arg
 var data = {
 protocolVersion: 0x01,
 username: "test",
 password: "test",
 app: "Meine Tolle Applikation",
 processes: new Int64(123782),
 nodes: new Int64(1010000),
 nodeId: 0,
 ranks: [
 123, 495
 ],
 counters: [
 "broadcast",
 "barrier"
 ],
 sends: [
 "ibsend",
 "bsend",
 "irsend"
 ],
 features: {
 restart: true,
 abort: true
 }
 };*/

/**
 * initialized a Node of a Application - for Protocol ActionId 0x01
 *
 * @param data object with the init data
 * @param callback
 */
exports.InitAction = function(data, callback){
    rclient.SMEMBERS("apps", function(apps){
        var applen = apps.length;
        var appId = null;
        apps.forEach(function(appName, i){
            if(appName == data.app){
                appId = i;
            }
            if(appId != null){
                return;
            }
        });

        if(appId == null){
            rclient.RPUSH("apps", data.app);
            rclient.HMSET("app/"+applen,{
                processes: data.processes.toOctetString(),
                nodes: data.nodes.toOctetString(),
                restart: data.features.restart,
                abort: data.features.abort
            });
            appId = applen;
        }

        var nodeId = data.nodeId;

        rclient.SADD("app/"+appId+"/nodes", nodeId);

        //app/X/node/Z/ranks = {y1, y2, y3, ...}
        data.ranks.forEach(function(value) {
            rclient.SADD("app/"+appId+"/node/"+nodeId+"/ranks", value);
            //app/X/rank/Y/node = Z
            rclient.SET("app/"+appId+"/rank/"+value+"/node", nodeId);
        });

        if(nodeId == 0){
            data.counters.forEach(function(value){
                rclient.SADD("app/"+appId+"/counters", value);
            });
            data.sends.forEach(function(value){
                rclient.SADD("app/"+appId+"/sends", value);
            });
        }
        callback(appId);
    });
};

/*
//EXAMPLE data Arg
var data = [
    {
        rank: 13,
        counters: {
            broadcast: 123123,
            barrier: 4234234
        },
        data: [
            {
                rank: 2,
                counter: new Int64(12344),
                size: new Int64(237373)
            },
            {
                rank: 3,
                counter: new Int64(123123),
                size: new Int64(2020203)
            }
        ]
    },
    {
        rank: 24,
        counters: {
            broadcast: 595959,
            barrier: 202340234
        },
        data: [
            {
                rank: 1,
                counter: new Int64(123123855),
                size: new Int64(2034)
            }
        ]
    }
];*/

/**
 * For Protocol ActionId 0x02
 *
 * @param appId ID of the Application
 * @param data received data
 * @returns boolean
 */
exports.receiveAction = function(appId, data){
    var error = false;

    data.forEach(function(rankData){
        rankData.counters.forEach(function(countVal, funcName){
            _setCounterData(appId, rankData.rank, funcName, countVal);
        });

        rankData.data.forEach(function(sendData){
            _setSendData(appId, rankData.rank, sendData);
        });
    });

    return !error;
};
/*
var data = [
    {
        rank: 13,
        functions: {
            ibsend: [
                {
                    rank: 2,
                    counter: new Int64(123),
                    size: new Int64(1231234)
                },
                {
                    rank: 3,
                    counter: new Int64(47474),
                    size: new Int64(2349)
                }
            ],
            bsend: [
                {
                    rank: 4,
                    counter: new Int64(2349),
                    size: new Int64(239492)
                }
            ]
        }
    },
    {
        rank: 24,
        functions: {
            ibsend: [
                {
                    rank: 1,
                    counter: new Int64(123123),
                    size: new Int64(349234)
                }
            ],
            bsend: [
            ]
        }
    }
];*/

/**
 * For Protocol ActionId 0x03
 *
 * @param appId ID of the Application
 * @param data received data
 * @returns boolean
 */
exports.receiveDetailsAction = function(appId, data){
    data.forEach(function(rankData){
        rankData.functions.forEach(function(sendDataList, funcName){
            sendDataList.forEach(function(sendData){
                _setSendDetailData(appId, rankData.rank, funcName, sendData);
            });
        });
    });
};

/**
 *
 * @param appId
 * @param rankId
 * @param funcName
 * @param countValue
 * @private
 */
_setCounterData = function(appId, rankId, funcName, countValue){
    var prefix = "app/"+appId+"/rank/"+rankId+"/counter/"+funcName;
    rclient.INCR(prefix, function(err, i){
        rclient.GETSET(prefix+"/last", countValue, function(err, last){
            if(!last){
                last = 0;
            }
            rclient.HMSET(prefix+"/value/"+i, {
                "value": countValue - last,
                "timestamp": new Date().getTime()
            });
            rclient.EXPIRE(prefix+"/value/"+i, expireTime);
        });
    });
};

/**
 *
 * @param appId
 * @param rankId
 * @param data
 * @private
 */
_setSendData = function(appId, rankId, data){
    _setSendDetailData(appId, rankId, "send", data);
};

/*
{
    rank: 13,
    functions: {
    ibsend: [
        {
            rank: 2,
            counter: new Int64(123),
            size: new Int64(1231234)
        },
        {
            rank: 3,
            counter: new Int64(47474),
            size: new Int64(2349)
        }
    ],
        bsend: [
        {
            rank: 4,
            counter: new Int64(2349),
            size: new Int64(239492)
        }
    ]
}

*/

/**
 *
 * @param appId
 * @param rankId
 * @param funcName
 * @param data
 * @private
 */
_setSendDetailData = function(appId, rankId, funcName, data){
    var prefix = "app/"+appId+"/rank/"+rankId+"/to/"+data.rank+"/"+funcName;

    rclient.INCR(prefix, function(err, i){
        rclient.HGETALL(prefix+"/last", function(err, obj){
            if(obj == null){
                obj = {
                    "rank": data.rank,
                    "counter": 0,
                    "size": 0

                };
            }else{
                obj = {
                    "rank": data.rank,
                    "counter": Int64(obj.counter),
                    "size": Int64(obj.size)
                };
            }
            var safeData = {
                "rank": data.rank,
                "counter": data.counter.toOctetString,
                "size": data.size.toOctetString
            };

            rclient.HMSET(prefix+"/last", safeData);
            rclient.HMSET(prefix+"/value/"+i, {
                "rank": data.rank,
                "counter": data.counter - obj.counter,
                "size": data.size - obj.size,
                "timestamp": new Date().getTime()
            });
            rclient.EXPIRE(prefix+"/value/"+i, expireTime);
        });
    });
};
