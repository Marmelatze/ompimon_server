var
    BufferBuilder = require("buffer-builder"),
    stub = require("ompimon-protocol/test-client-stub"),
    _ = require("underscore"),
    Parser = require("ompimon-protocol/parser")
;

var action = 0x04;


var WebSocket = require('ws');
var ws = new WebSocket('ws://localhost:8080');

var send = false;

ws.on('open', function() {
    console.log("connected");


    ws.on('message', function(message) {
        console.log("received:");
        console.log(message);

        var parser = new Parser(message);
        switch(parser.readUInt8()) {
            case 0x05:
                parseCounterDetail(parser);
                break;
            case 0x04:
                parseCounter(parser);
                break;
        }

        if (!send) {
            send = true;
            var data = null;
            switch (action) {
                case 0x04:
                    data = stub.buildCounter({
                        appId: 1,
                        counterId: 1
                    });
                    break;
                case 0x05:
                    data = stub.buildCounterDetail({
                        appId: 1,
                        processId: 1,
                        counterId: 1
                    });
                    break;
            }
            /*
            var data = stub.buildCounter({
                appId: 1,
                counterId: null
            });*/
            console.log(data);
            var buffer = new BufferBuilder();
            buffer.appendUInt8(action);
            buffer.appendBuffer(data);
            ws.send(buffer.get(), {binary: true});
        }

    });

    var data = stub.buildLogin(stub.loginData);
    var buffer = new BufferBuilder();
    buffer.appendUInt8(0x01);
    buffer.appendBuffer(data);
    ws.send(buffer.get(), {binary: true});
});


function parseCounterDetail(parser) {
    var result = [];
    var length = parser.readUInt16();
    console.log(length);
    for (var i = 0; i < length; i++) {
        result.push({
            timestamp: parser.readUInt32(),
            value: parser.readUInt32()
        });
    }
    console.log(result);
}

function parseCounter(parser) {
    var length = parser.readUInt32();
    var result = [];
    for (var i = 0; i< length; i++) {
        result.push({
            rank: parser.readUInt32(),
            value: parser.readUInt32()
        });
    }
    console.log(result);
}