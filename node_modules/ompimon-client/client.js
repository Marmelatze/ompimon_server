/**
 * @module ompimon
 * @submodule ompimon-client
 */

var
    util = require("util"),
    _ = require("underscore"),
    eventEmitter = require("events").EventEmitter,
    async = require("async"),
    Storage = require("ompimon-storage")

    ;


/**
 * @class Client
 * @namespace Ompimon.Client
 * @param id {Integer} Client id
 * @param socket {Websocket}
 * @extends EventEmitter
 * @constructor
 */
module.exports = Client;
function Client(id, socket) {
    eventEmitter.call(this);
    this.init(id, socket);
}

util.inherits(Client, eventEmitter);

_.extend(Client.prototype, {
    /**
     * Id of Client
     * @property id
     * @type Integer
     */
    id: null,
    /**
     * Websocket of client
     * @property socket
     * @type Websocket
     */
    socket: null,

    /**
     * Whether this client is authenticated
     * @property authenticated
     * @type boolean
     */
    authenticated: false,

    /**
     * Id of the current app
     * @property appId
     * @type Integer
     */
    appId: null,

    /**
     * Current action
     * @property action
     * @type Integer
     */
    action: null,


    init: function(id, socket) {
        var self = this;
        this.id = id;
        this.socket = socket;

        this.redis = Storage.createConnection();

        this.redis.on('subscribe', function (channel) {
            console.log("subscribed to " + channel);
        });

        this.redis.on('message', function (channel, message) {
            if (channel !== "client:app:" + self.appId) {
                return;
            }

            process.nextTick(function() {
                self.emit('message', JSON.parse(message));
            });
        });
    },


    /**
     * receive updates for this app
     * @method selectApp
     * @param appId {Integer}
     */
    selectApp: function (appId) {
        if (appId == this.appId) {
            return;
        }

        this.redis.unsubscribe('client:app:' + this.appId); // unsubscribe from old
        this.appId = appId;
        this.redis.subscribe('client:app:' + this.appId);

        this.removeAllListeners('message');

        process.nextTick(function() {
            this.emit('select_app', appId);
        }.bind(this));

    },



    /**
     * Select current action
     *
     * @method selectAction
     * @param action {Integer}
     */
    selectAction: function (action) {
        if (action == this.action) {
            return;
        }
        this.action = action;
        this.removeAllListeners('message');
        process.nextTick(function() {
            this.emit('select_action', action);
        }.bind(this));
    },

    quit: function () {
        this.emit('quit');
        this.removeAllListeners('message');
        this.removeAllListeners('select_app');
        this.removeAllListeners('select_action');
    },


    /**
     * Fired when a message from pub/sub is received
     * @event message
     * @param message {Object}
     */
    onMessage: null,

    /**
     * fired when an app is selected
     * @event select_app
     * @param appId {Integer}
     */
    onSelectApp: null,

    /**
     * fired when an action is executed
     * @event select_action
     * @param client {Ompimon.Client.Client}
     * @param action {Integer}
     */
    onSelectAction: null
});

