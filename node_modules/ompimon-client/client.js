/**
 * @module ompimon
 * @submodule ompimon-client
 */

var
    util = require("util"),
    _ = require("underscore"),
    eventEmitter = require("events").EventEmitter,
    async = require("async"),
    BufferBuilder = require("buffer-builder"),
    Storage = require("ompimon-storage"),
    color = require("bash-color")


    ;


/**
 * @class Client
 * @namespace Ompimon.Client
 * @param id {Integer} Client id
 * @param socket {Websocket}
 * @extends EventEmitter
 * @constructor
 */
module.exports = Client;
function Client(id, socket) {
    eventEmitter.call(this);
    this.init(id, socket);
}

util.inherits(Client, eventEmitter);

_.extend(Client.prototype, {



    init: function(id, socket) {
        var self = this;

        /**
         * Id of Client
         * @property id
         * @type Integer
         */
        this.id = id;
        /**
         * Websocket of client
         * @property socket
         * @type Websocket
         */
        this.socket = socket;

        /**
         * Whether this client is authenticated
         * @property authenticated
         * @type boolean
         */
        this.authenticated = false;

        /**
         * Id of the current app
         * @property appId
         * @type Integer
         */
        this.appId = null;

        /**
         * Current action
         * @property action
         * @type Integer
         */
        this.action = null;

        this.log("connected");

        this.redis = Storage.createConnection();

        this.redis.on('subscribe', function (channel) {
            console.log("subscribed to " + channel);
        });

        this.redis.on('message', function (channel, message) {
            if (channel !== "client:app:" + self.appId) {
                return;
            }
            self.log("recevied from cluster " + color.black(message));
            message = JSON.parse(message);
            if (message.action == 'finalize') {
                this.log("received finalize");
                var buffer = new BufferBuilder();
                buffer.appendUInt8(0xA0);
                buffer.appendUInt32BE(this.appId);
                this.write(buffer.get());
            } else {
                process.nextTick(function() {
                    self.emit('message', message);
                });
            }

        }.bind(this));
    },


    /**
     * receive updates for this app
     * @method selectApp
     * @param appId {Integer}
     */
    selectApp: function (appId) {
        if (appId == this.appId) {
            return;
        }
        this.log("selected app " + appId);

        this.redis.unsubscribe('client:app:' + this.appId); // unsubscribe from old
        this.appId = appId;
        this.redis.subscribe('client:app:' + this.appId);

        this.removeAllListeners('message');

        this.emit('select_app', appId);
        this.emit('change');
    },



    /**
     * Select current action
     *
     * @method selectAction
     * @param action {Integer}
     */
    selectAction: function (action) {
        this.log("selected action " + action);
        if (action == this.action) {
            return;
        }
        this.action = action;
        this.removeAllListeners('message');
        this.emit('select_action', action);
        this.emit('change');
    },

    quit: function () {
        this.log("quit");
        this.emit('quit');
        this.emit('change');
        this.removeAllListeners('message');
        this.removeAllListeners('select_app');
        this.removeAllListeners('select_action');
        this.redis.quit();
    },

    write: function (message) {
        var self = this;
        if (null !== this.socket) {
            this.socket.send(message, {binary: true}, function(err) {
                if (err) {
                    console.log(err);
                    self.quit();
                }
            });
        }
    },
    log: function (message) {
        var msg = "";
        for (var i=0; i < arguments.length; i++) {
            if (typeof arguments[i] != 'string') {
                msg += util.inspect(arguments[i]) + "\n";
            } else {
                msg += arguments[i] + "\n";
            }
        }

        console.log(color.green("[" + this.id + "]") + ": " + msg.substr(0, msg.length-1));
    },

    /**
     * Fired when a message from pub/sub is received
     * @event message
     * @param message {Object}
     */
    onMessage: null,

    /**
     * fired when an app is selected
     * @event select_app
     * @param appId {Integer}
     */
    onSelectApp: null,

    /**
     * fired when an action is executed
     * @event select_action
     * @param client {Ompimon.Client.Client}
     * @param action {Integer}
     */
    onSelectAction: null
});

