/**
 * @module ompimon
 * @submodule ompimon-monitor
 */

var
    _ = require("underscore"),
    util = require("util"),
    color = require("bash-color"),
    Storage = require("ompimon-storage")
;

module.exports = Monitor;

/**
 * Sends current activities to the backend over redis publish/subscribe.
 * Only active when monitor: true is set in config.json
 *
 * @class Monitor
 * @namespace Ompimon.Monitor
 * @param type {String} cluster|client|cluster_client|cluster_server
 * @param name {String} id of this component
 * @constructor
 */
function Monitor(type, name)
{
    this.init.apply(this, arguments);
}

_.extend(Monitor.prototype, {

    init: function (type, name) {
        if (!config.monitor) {
            return;
        }
        this.type = type;
        this.name = name;
        this.redis = Storage.createConnection();
        this.counter = 0;

        this.log("started");
        this.addComponent(type, name);

        process.on('SIGINT', function() {
            console.log("terminate");
            this.removeComponent(type, name);
            setTimeout(function() {
                process.exit();

            }, 1000);
        }.bind(this));
    },

    getId: function() {
        return this.type+":"+this.name;
    },

    /**
     * Send a new message
     * 'me' in from or to, will be replaced with the own id.
     *
     * @method message
     * @param from {String} id of the sender.
     * @param to {String} id of the receiver
     * @param action {Integer} Action code
     * @param payload {Object} Transmitted data, only needed for message size.
     */
    message: function(from, to, action, payload) {
        var time = new Date().getTime();
        if (!config.monitor) {
            return;
        }
        if ('me' == from) {
            from = this.getId();
        }
        if ('me' == to) {
            to = this.getId();
        }
        var length = 0;
        if (!_.isUndefined(payload)) {
            if (_.isObject(payload) || _.isArray(payload)) {
                length = JSON.stringify(payload).length;
            } else {
                length = payload.length;
            }
        }


        this.log("from " + from + " to "+to+":" + action);
        var memory = process.memoryUsage();
        console.log("Heap",
            Math.round(memory.heapUsed / 1024 / 1024) + " MB / "+
            Math.round(memory.heapTotal / 1024 / 1024) + " MB"
        );

        this.redis.publish('monitor', JSON.stringify({
            type: 'message',
            data: {
                from: from,
                to: to,
                action: action,
                size: length,
                time: time,
                counter: this.counter++
            }
        }));
    },

    /**
     * Add a new component to the monitor
     *
     * @method addComponent
     * @param type {String}
     * @param name {String}
     */
    addComponent: function(type, name) {
        if (!config.monitor) {
            return;
        }
        this.log("added " + type+":"+name);
        this.redis.publish('monitor', JSON.stringify({
            type: 'add',
            data: {
                type: type,
                name: name
            }
        }));
    },

    /**
     * Remove an existing component from the monitor
     *
     * @method removeComponent
     * @param type
     * @param name
     */
    removeComponent: function(type, name) {
        if (!config.monitor) {
            return;
        }

        this.log("removed "+ type+":"+name);
        this.redis.publish('monitor', JSON.stringify({
            type: 'remove',
            data: {
                type: type,
                name: name
            }
        }));
    },

    /**
     * Write pretty log message
     * @method log
     * @param message
     */
    log: function (message) {
        console.log(color.purple("[" + this.getId() + "]") + ": " + message);
    }

});